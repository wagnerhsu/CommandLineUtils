### YamlMime:ManagedReference
items:
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  id: CommandLineApplicationExtensions
  parent: McMaster.Extensions.CommandLineUtils
  children:
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.Reflection.Assembly)
  langs:
  - csharp
  - vb
  name: CommandLineApplicationExtensions
  nameWithType: CommandLineApplicationExtensions
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  type: Class
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: CommandLineApplicationExtensions
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 14
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nHelper methods for <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class CommandLineApplicationExtensions
    content.vb: Public Module CommandLineApplicationExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)
  id: Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: Argument<T>(CommandLineApplication, String, String, Boolean)
  nameWithType: CommandLineApplicationExtensions.Argument<T>(CommandLineApplication, String, String, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument<T>(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Argument
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 24
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command line argument with values that should be parsable into <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n"
  example: []
  syntax:
    content: public static CommandArgument<T> Argument<T>(this CommandLineApplication app, string name, string description, bool multipleValues = false)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: name
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: multipleValues
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandArgument{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Argument(Of T)(app As CommandLineApplication, name As String, description As String, multipleValues As Boolean = False) As CommandArgument(Of T)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument*
  nameWithType.vb: CommandLineApplicationExtensions.Argument(Of T)(CommandLineApplication, String, String, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument(Of T)(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, System.Boolean)
  name.vb: Argument(Of T)(CommandLineApplication, String, String, Boolean)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  id: Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: Option<T>(CommandLineApplication, String, String, CommandOptionType)
  nameWithType: CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Option
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 35
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command-line option with values that should be parsable into <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n"
  example: []
  syntax:
    content: public static CommandOption<T> Option<T>(this CommandLineApplication app, string template, string description, CommandOptionType optionType)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: template
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: optionType
      type: McMaster.Extensions.CommandLineUtils.CommandOptionType
      description: ''
    typeParameters:
    - id: T
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Option(Of T)(app As CommandLineApplication, template As String, description As String, optionType As CommandOptionType) As CommandOption(Of T)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option*
  nameWithType.vb: CommandLineApplicationExtensions.Option(Of T)(CommandLineApplication, String, String, CommandOptionType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType)
  name.vb: Option(Of T)(CommandLineApplication, String, String, CommandOptionType)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  id: Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: Option<T>(CommandLineApplication, String, String, CommandOptionType, Boolean)
  nameWithType: CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Option
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 47
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command-line option with values that should be parsable into <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n"
  example: []
  syntax:
    content: public static CommandOption<T> Option<T>(this CommandLineApplication app, string template, string description, CommandOptionType optionType, bool inherited)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: template
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: optionType
      type: McMaster.Extensions.CommandLineUtils.CommandOptionType
      description: ''
    - id: inherited
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Option(Of T)(app As CommandLineApplication, template As String, description As String, optionType As CommandOptionType, inherited As Boolean) As CommandOption(Of T)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option*
  nameWithType.vb: CommandLineApplicationExtensions.Option(Of T)(CommandLineApplication, String, String, CommandOptionType, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Boolean)
  name.vb: Option(Of T)(CommandLineApplication, String, String, CommandOptionType, Boolean)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  id: Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: Option<T>(CommandLineApplication, String, String, CommandOptionType, Action<CommandOption>)
  nameWithType: CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType, Action<CommandOption>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action<McMaster.Extensions.CommandLineUtils.CommandOption>)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Option
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 59
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command-line option with values that should be parsable into <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n"
  example: []
  syntax:
    content: public static CommandOption<T> Option<T>(this CommandLineApplication app, string template, string description, CommandOptionType optionType, Action<CommandOption> configuration)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: template
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: optionType
      type: McMaster.Extensions.CommandLineUtils.CommandOptionType
      description: ''
    - id: configuration
      type: System.Action{McMaster.Extensions.CommandLineUtils.CommandOption}
      description: ''
    typeParameters:
    - id: T
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption{{T}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Option(Of T)(app As CommandLineApplication, template As String, description As String, optionType As CommandOptionType, configuration As Action(Of CommandOption)) As CommandOption(Of T)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option*
  nameWithType.vb: CommandLineApplicationExtensions.Option(Of T)(CommandLineApplication, String, String, CommandOptionType, Action(Of CommandOption))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action(Of McMaster.Extensions.CommandLineUtils.CommandOption))
  name.vb: Option(Of T)(CommandLineApplication, String, String, CommandOptionType, Action(Of CommandOption))
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  id: HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: HelpOption(CommandLineApplication)
  nameWithType: CommandLineApplicationExtensions.HelpOption(CommandLineApplication)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: HelpOption
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 67
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds the help option with the template <code>-?|-h|--help</code>.\n"
  example: []
  syntax:
    content: public static CommandOption HelpOption(this CommandLineApplication app)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HelpOption(app As CommandLineApplication) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)
  id: HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: HelpOption(CommandLineApplication, Boolean)
  nameWithType: CommandLineApplicationExtensions.HelpOption(CommandLineApplication, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: HelpOption
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 76
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds the help option with the template <code>-?|-h|--help</code>.\n"
  example: []
  syntax:
    content: public static CommandOption HelpOption(this CommandLineApplication app, bool inherited)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: inherited
      type: System.Boolean
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HelpOption(app As CommandLineApplication, inherited As Boolean) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  id: VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: VerboseOption(CommandLineApplication)
  nameWithType: CommandLineApplicationExtensions.VerboseOption(CommandLineApplication)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: VerboseOption
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 84
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds the verbose option with the template <code>-v|--verbose</code>.\n"
  example: []
  syntax:
    content: public static CommandOption VerboseOption(this CommandLineApplication app)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VerboseOption(app As CommandLineApplication) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)
  id: VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: VerboseOption(CommandLineApplication, String)
  nameWithType: CommandLineApplicationExtensions.VerboseOption(CommandLineApplication, String)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: VerboseOption
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 93
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds the verbose option with the template <code>-v|--verbose</code>.\n"
  example: []
  syntax:
    content: public static CommandOption VerboseOption(this CommandLineApplication app, string template)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: template
      type: System.String
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VerboseOption(app As CommandLineApplication, template As String) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})
  id: OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: OnExecute(CommandLineApplication, Func<Task>)
  nameWithType: CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Func<Task>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: OnExecute
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 101
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nSets <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke\" data-throw-if-not-resolved=\"false\"></xref> with a return code of <code>0</code>.\n"
  example: []
  syntax:
    content: public static void OnExecute(this CommandLineApplication app, Func<Task> action)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: action
      type: System.Func{System.Threading.Tasks.Task}
      description: An asynchronous action to invoke when the ocmmand is selected..
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub OnExecute(app As CommandLineApplication, action As Func(Of Task))
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute*
  nameWithType.vb: CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Func(Of Task))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Func(Of System.Threading.Tasks.Task))
  name.vb: OnExecute(CommandLineApplication, Func(Of Task))
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)
  id: OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: OnExecute(CommandLineApplication, Action)
  nameWithType: CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Action)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Action)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: OnExecute
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 113
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nSets <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke\" data-throw-if-not-resolved=\"false\"></xref> with a return code of <code>0</code>.\n"
  example: []
  syntax:
    content: public static void OnExecute(this CommandLineApplication app, Action action)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: action
      type: System.Action
      description: An action to invoke when the command is selected.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub OnExecute(app As CommandLineApplication, action As Action)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
  id: OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: OnValidationError(CommandLineApplication, Func<ValidationResult, Int32>)
  nameWithType: CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Func<ValidationResult, Int32>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Func<System.ComponentModel.DataAnnotations.ValidationResult, System.Int32>)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: OnValidationError
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 125
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nSets an action to invoke, but only when there is a validation error.\n"
  example: []
  syntax:
    content: public static void OnValidationError(this CommandLineApplication app, Func<ValidationResult, int> action)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: action
      type: System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub OnValidationError(app As CommandLineApplication, action As Func(Of ValidationResult, Integer))
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError*
  nameWithType.vb: CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Func(Of ValidationResult, Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Func(Of System.ComponentModel.DataAnnotations.ValidationResult, System.Int32))
  name.vb: OnValidationError(CommandLineApplication, Func(Of ValidationResult, Int32))
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
  id: OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: OnValidationError(CommandLineApplication, Action<ValidationResult>)
  nameWithType: CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Action<ValidationResult>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Action<System.ComponentModel.DataAnnotations.ValidationResult>)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: OnValidationError
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 133
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nSets an action to invoke, but only when there is a validation error.\n"
  example: []
  syntax:
    content: public static void OnValidationError(this CommandLineApplication app, Action<ValidationResult> action)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: action
      type: System.Action{System.ComponentModel.DataAnnotations.ValidationResult}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub OnValidationError(app As CommandLineApplication, action As Action(Of ValidationResult))
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError*
  nameWithType.vb: CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Action(Of ValidationResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Action(Of System.ComponentModel.DataAnnotations.ValidationResult))
  name.vb: OnValidationError(CommandLineApplication, Action(Of ValidationResult))
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)
  id: VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)
  isExtensionMethod: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: VersionOptionFromAssemblyAttributes(CommandLineApplication, Assembly)
  nameWithType: CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(CommandLineApplication, Assembly)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: VersionOptionFromAssemblyAttributes
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 153
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nFinds <xref href=\"System.Reflection.AssemblyInformationalVersionAttribute\" data-throw-if-not-resolved=\"false\"></xref> on <code data-dev-comment-type=\"paramref\" class=\"paramref\">assembly</code> and uses that\nto set <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion\" data-throw-if-not-resolved=\"false\"></xref>.\n<p>\nUses the Version that is part of the <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> of the specified assembly\nif no <xref href=\"System.Reflection.AssemblyInformationalVersionAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied.\n</p>\n"
  example: []
  syntax:
    content: public static CommandOption VersionOptionFromAssemblyAttributes(this CommandLineApplication app, Assembly assembly)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: assembly
      type: System.Reflection.Assembly
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VersionOptionFromAssemblyAttributes(app As CommandLineApplication, assembly As Assembly) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Either <code data-dev-comment-type="paramref" class="paramref">app</code> or <code data-dev-comment-type="paramref" class="paramref">assembly</code> is <code>null</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.Reflection.Assembly)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.Reflection.Assembly)
  id: VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.Reflection.Assembly)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  langs:
  - csharp
  - vb
  name: VersionOptionFromAssemblyAttributes(CommandLineApplication, String, Assembly)
  nameWithType: CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(CommandLineApplication, String, Assembly)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplicationExtensions.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: VersionOptionFromAssemblyAttributes
    path: ../src/CommandLineUtils/CommandLineApplicationExtensions.cs
    startLine: 168
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nFinds <xref href=\"System.Reflection.AssemblyInformationalVersionAttribute\" data-throw-if-not-resolved=\"false\"></xref> on <code data-dev-comment-type=\"paramref\" class=\"paramref\">assembly</code> and uses that\nto set <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion\" data-throw-if-not-resolved=\"false\"></xref>.\n<p>\nUses the Version that is part of the <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> of the specified assembly\nif no <xref href=\"System.Reflection.AssemblyInformationalVersionAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied.\n</p>\n"
  example: []
  syntax:
    content: public static CommandOption VersionOptionFromAssemblyAttributes(CommandLineApplication app, string template, Assembly assembly)
    parameters:
    - id: app
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    - id: template
      type: System.String
      description: ''
    - id: assembly
      type: System.Reflection.Assembly
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
    content.vb: Public Shared Function VersionOptionFromAssemblyAttributes(app As CommandLineApplication, template As String, assembly As Assembly) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Either <code data-dev-comment-type="paramref" class="paramref">app</code> or <code data-dev-comment-type="paramref" class="paramref">assembly</code> is <code>null</code>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandLineApplication
  parent: McMaster.Extensions.CommandLineUtils
  name: CommandLineApplication
  nameWithType: CommandLineApplication
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
- uid: McMaster.Extensions.CommandLineUtils
  commentId: N:McMaster.Extensions.CommandLineUtils
  name: McMaster.Extensions.CommandLineUtils
  nameWithType: McMaster.Extensions.CommandLineUtils
  fullName: McMaster.Extensions.CommandLineUtils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument
  name: Argument
  nameWithType: CommandLineApplicationExtensions.Argument
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: McMaster.Extensions.CommandLineUtils.CommandArgument{{T}}
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandArgument{``0}
  parent: McMaster.Extensions.CommandLineUtils
  definition: McMaster.Extensions.CommandLineUtils.CommandArgument`1
  name: CommandArgument<T>
  nameWithType: CommandArgument<T>
  fullName: McMaster.Extensions.CommandLineUtils.CommandArgument<T>
  nameWithType.vb: CommandArgument(Of T)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandArgument(Of T)
  name.vb: CommandArgument(Of T)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument`1
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument`1
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandArgument`1
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandArgument`1
  name: CommandArgument<T>
  nameWithType: CommandArgument<T>
  fullName: McMaster.Extensions.CommandLineUtils.CommandArgument<T>
  nameWithType.vb: CommandArgument(Of T)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandArgument(Of T)
  name.vb: CommandArgument(Of T)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument`1
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument`1
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option
  name: Option
  nameWithType: CommandLineApplicationExtensions.Option
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option
- uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandOptionType
  parent: McMaster.Extensions.CommandLineUtils
  name: CommandOptionType
  nameWithType: CommandOptionType
  fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
- uid: McMaster.Extensions.CommandLineUtils.CommandOption{{T}}
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandOption{``0}
  parent: McMaster.Extensions.CommandLineUtils
  definition: McMaster.Extensions.CommandLineUtils.CommandOption`1
  name: CommandOption<T>
  nameWithType: CommandOption<T>
  fullName: McMaster.Extensions.CommandLineUtils.CommandOption<T>
  nameWithType.vb: CommandOption(Of T)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandOption(Of T)
  name.vb: CommandOption(Of T)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption`1
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption`1
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandOption`1
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandOption`1
  name: CommandOption<T>
  nameWithType: CommandOption<T>
  fullName: McMaster.Extensions.CommandLineUtils.CommandOption<T>
  nameWithType.vb: CommandOption(Of T)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandOption(Of T)
  name.vb: CommandOption(Of T)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption`1
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption`1
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{McMaster.Extensions.CommandLineUtils.CommandOption}
  commentId: T:System.Action{McMaster.Extensions.CommandLineUtils.CommandOption}
  parent: System
  definition: System.Action`1
  name: Action<CommandOption>
  nameWithType: Action<CommandOption>
  fullName: System.Action<McMaster.Extensions.CommandLineUtils.CommandOption>
  nameWithType.vb: Action(Of CommandOption)
  fullName.vb: System.Action(Of McMaster.Extensions.CommandLineUtils.CommandOption)
  name.vb: Action(Of CommandOption)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  name: HelpOption
  nameWithType: CommandLineApplicationExtensions.HelpOption
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
- uid: McMaster.Extensions.CommandLineUtils.CommandOption
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandOption
  parent: McMaster.Extensions.CommandLineUtils
  name: CommandOption
  nameWithType: CommandOption
  fullName: McMaster.Extensions.CommandLineUtils.CommandOption
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  name: VerboseOption
  nameWithType: CommandLineApplicationExtensions.VerboseOption
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: Invoke
  nameWithType: CommandLineApplication.Invoke
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute
  name: OnExecute
  nameWithType: CommandLineApplicationExtensions.OnExecute
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError
  name: OnValidationError
  nameWithType: CommandLineApplicationExtensions.OnValidationError
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError
- uid: System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32}
  commentId: T:System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32}
  parent: System
  definition: System.Func`2
  name: Func<ValidationResult, Int32>
  nameWithType: Func<ValidationResult, Int32>
  fullName: System.Func<System.ComponentModel.DataAnnotations.ValidationResult, System.Int32>
  nameWithType.vb: Func(Of ValidationResult, Int32)
  fullName.vb: System.Func(Of System.ComponentModel.DataAnnotations.ValidationResult, System.Int32)
  name.vb: Func(Of ValidationResult, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.ComponentModel.DataAnnotations.ValidationResult}
  commentId: T:System.Action{System.ComponentModel.DataAnnotations.ValidationResult}
  parent: System
  definition: System.Action`1
  name: Action<ValidationResult>
  nameWithType: Action<ValidationResult>
  fullName: System.Action<System.ComponentModel.DataAnnotations.ValidationResult>
  nameWithType.vb: Action(Of ValidationResult)
  fullName.vb: System.Action(Of System.ComponentModel.DataAnnotations.ValidationResult)
  name.vb: Action(Of ValidationResult)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.AssemblyInformationalVersionAttribute
  commentId: T:System.Reflection.AssemblyInformationalVersionAttribute
  isExternal: true
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: OptionVersion
  nameWithType: CommandLineApplication.OptionVersion
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
- uid: System.Reflection.AssemblyName
  commentId: T:System.Reflection.AssemblyName
  isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
  name: VersionOptionFromAssemblyAttributes
  nameWithType: CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
