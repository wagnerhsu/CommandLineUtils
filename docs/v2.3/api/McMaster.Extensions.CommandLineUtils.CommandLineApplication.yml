### YamlMime:ManagedReference
items:
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandLineApplication
  id: CommandLineApplication
  parent: McMaster.Extensions.CommandLineUtils
  children:
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.IConsole)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddSubcommand(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.AllowArgumentSeparator
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String,System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String,System.String,System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument``1(System.String,System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ClusterOptions
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication},System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command``1(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication{``0}},System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Conventions
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Description
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Dispose
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Error
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(System.String[])
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(McMaster.Extensions.CommandLineUtils.IConsole,System.String[])
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(System.String[])
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(McMaster.Extensions.CommandLineUtils.IConsole,System.String[])
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(System.String[])
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExtendedHelpText
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetVersionText
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.HandleParseResult(McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String,System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpTextGenerator
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.MakeSuggestionsInErrorMessage
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Names
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Threading.Tasks.Task{System.Int32}})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnParsingComplete(System.Action{McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption},System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption},System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionsComparison
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Out
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp(System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHint
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowInHelpText
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowRootCommandFullNameAndVersion
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowVersion
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.System#IServiceProvider#GetService(System.Type)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.Validators
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValueParsers
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.Func{System.String},System.Func{System.String})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.String,System.String)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.WorkingDirectory
  langs:
  - csharp
  - vb
  name: CommandLineApplication
  nameWithType: CommandLineApplication
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  type: Class
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.Validation.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: CommandLineApplication
    path: ../src/CommandLineUtils/CommandLineApplication.Validation.cs
    startLine: 10
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nDescribes a set of command line arguments, options, and execution behavior.\n<xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication\" data-throw-if-not-resolved=\"false\"></xref> can be nested to support subcommands.\n"
  example: []
  syntax:
    content: 'public class CommandLineApplication : IServiceProvider, IDisposable'
    content.vb: >-
      Public Class CommandLineApplication
          Implements IServiceProvider, IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication`1
  implements:
  - System.IServiceProvider
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(System.String,System.String,System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(System.Boolean)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(System.String)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Func{System.Threading.Tasks.Task})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Action)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(System.Reflection.Assembly)
  - McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: CommandLineApplication(Boolean)
  nameWithType: CommandLineApplication.CommandLineApplication(Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.CommandLineApplication(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: .ctor
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 44
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nInitializes a new instance of <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CommandLineApplication(bool throwOnUnexpectedArg = true)
    parameters:
    - id: throwOnUnexpectedArg
      type: System.Boolean
      description: Initial value for <xref href="McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(throwOnUnexpectedArg As Boolean = True)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.IConsole)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.IConsole)
  id: '#ctor(McMaster.Extensions.CommandLineUtils.IConsole)'
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: CommandLineApplication(IConsole)
  nameWithType: CommandLineApplication.CommandLineApplication(IConsole)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.CommandLineApplication(McMaster.Extensions.CommandLineUtils.IConsole)
  type: Constructor
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: .ctor
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 53
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nInitializes a new instance of <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CommandLineApplication(IConsole console)
    parameters:
    - id: console
      type: McMaster.Extensions.CommandLineUtils.IConsole
      description: The console implementation to use.
    content.vb: Public Sub New(console As IConsole)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)
  id: '#ctor(McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)'
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: CommandLineApplication(IConsole, String, Boolean)
  nameWithType: CommandLineApplication.CommandLineApplication(IConsole, String, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.CommandLineApplication(McMaster.Extensions.CommandLineUtils.IConsole, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: .ctor
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 63
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nInitializes a new instance of <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CommandLineApplication(IConsole console, string workingDirectory, bool throwOnUnexpectedArg)
    parameters:
    - id: console
      type: McMaster.Extensions.CommandLineUtils.IConsole
      description: The console implementation to use.
    - id: workingDirectory
      type: System.String
      description: The current working directory.
    - id: throwOnUnexpectedArg
      type: System.Boolean
      description: Initial value for <xref href="McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(console As IConsole, workingDirectory As String, throwOnUnexpectedArg As Boolean)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)
  id: '#ctor(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator,McMaster.Extensions.CommandLineUtils.IConsole,System.String,System.Boolean)'
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: CommandLineApplication(IHelpTextGenerator, IConsole, String, Boolean)
  nameWithType: CommandLineApplication.CommandLineApplication(IHelpTextGenerator, IConsole, String, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.CommandLineApplication(McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator, McMaster.Extensions.CommandLineUtils.IConsole, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: .ctor
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 74
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nInitializes a new instance of <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CommandLineApplication(IHelpTextGenerator helpTextGenerator, IConsole console, string workingDirectory, bool throwOnUnexpectedArg)
    parameters:
    - id: helpTextGenerator
      type: McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator
      description: The help text generator to use.
    - id: console
      type: McMaster.Extensions.CommandLineUtils.IConsole
      description: The console implementation to use.
    - id: workingDirectory
      type: System.String
      description: The current working directory.
    - id: throwOnUnexpectedArg
      type: System.Boolean
      description: Initial value for <xref href="McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(helpTextGenerator As IHelpTextGenerator, console As IConsole, workingDirectory As String, throwOnUnexpectedArg As Boolean)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent
  id: Parent
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: CommandLineApplication.Parent
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Parent
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 122
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nDefaults to null. A link to the parent command if this is instance is a subcommand.\n"
  example: []
  syntax:
    content: public CommandLineApplication Parent { get; set; }
    parameters: []
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    content.vb: Public Property Parent As CommandLineApplication
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpTextGenerator
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpTextGenerator
  id: HelpTextGenerator
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: HelpTextGenerator
  nameWithType: CommandLineApplication.HelpTextGenerator
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpTextGenerator
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: HelpTextGenerator
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 127
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe help text generator to use.\n"
  example: []
  syntax:
    content: public IHelpTextGenerator HelpTextGenerator { get; set; }
    parameters: []
    return:
      type: McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator
    content.vb: Public Property HelpTextGenerator As IHelpTextGenerator
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpTextGenerator*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name
  id: Name
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: CommandLineApplication.Name
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Name
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 136
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe short name of the command. When this is a subcommand, it is the name of the word used to invoke the subcommand.\n"
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName
  id: FullName
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: CommandLineApplication.FullName
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: FullName
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 149
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe full name of the command to show in the help text.\n"
  example: []
  syntax:
    content: public string FullName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FullName As String
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Description
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Description
  id: Description
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: CommandLineApplication.Description
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Description
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Description
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 154
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nA description of the command.\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Description As String
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowInHelpText
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowInHelpText
  id: ShowInHelpText
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ShowInHelpText
  nameWithType: CommandLineApplication.ShowInHelpText
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowInHelpText
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ShowInHelpText
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 159
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nDetermines if this command appears in generated help text.\n"
  example: []
  syntax:
    content: public bool ShowInHelpText { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ShowInHelpText As Boolean
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowInHelpText*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExtendedHelpText
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExtendedHelpText
  id: ExtendedHelpText
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ExtendedHelpText
  nameWithType: CommandLineApplication.ExtendedHelpText
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExtendedHelpText
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ExtendedHelpText
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 164
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdditional text that appears at the bottom of generated help text.\n"
  example: []
  syntax:
    content: public string ExtendedHelpText { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ExtendedHelpText As String
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExtendedHelpText*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options
  id: Options
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: CommandLineApplication.Options
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Options
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 169
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAvailable command-line options on this command. Use <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions\" data-throw-if-not-resolved=\"false\"></xref> to get all available options, which may include inherited options.\n"
  example: []
  syntax:
    content: public List<CommandOption> Options { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{McMaster.Extensions.CommandLineUtils.CommandOption}
    content.vb: Public ReadOnly Property Options As List(Of CommandOption)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Names
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Names
  id: Names
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Names
  nameWithType: CommandLineApplication.Names
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Names
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Names
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 174
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAll names by which the command can be referenced. This includes <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name\" data-throw-if-not-resolved=\"false\"></xref> and an aliases added in <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IEnumerable<string> Names { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property Names As IEnumerable(Of String)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Names*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp
  id: OptionHelp
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: OptionHelp
  nameWithType: CommandLineApplication.OptionHelp
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: OptionHelp
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 193
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe option used to determine if help text should be displayed. This is set by calling <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CommandOption OptionHelp { get; }
    parameters: []
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
    content.vb: Public ReadOnly Property OptionHelp As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
  id: OptionVersion
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: OptionVersion
  nameWithType: CommandLineApplication.OptionVersion
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: OptionVersion
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 214
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe options used to determine if the command version should be displayed. This is set by calling <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String%2cSystem.Func%7bSystem.String%7d%2cSystem.Func%7bSystem.String%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CommandOption OptionVersion { get; }
    parameters: []
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
    content.vb: Public ReadOnly Property OptionVersion As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments
  id: Arguments
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Arguments
  nameWithType: CommandLineApplication.Arguments
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Arguments
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 219
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nRequired command-line arguments.\n"
  example: []
  syntax:
    content: public List<CommandArgument> Arguments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{McMaster.Extensions.CommandLineUtils.CommandArgument}
    content.vb: Public ReadOnly Property Arguments As List(Of CommandArgument)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments
  id: RemainingArguments
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: RemainingArguments
  nameWithType: CommandLineApplication.RemainingArguments
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: RemainingArguments
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 224
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nWhen initialized with <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument\" data-throw-if-not-resolved=\"false\"></xref> to <code>false</code>, this will contain any unrecognized arguments.\n"
  example: []
  syntax:
    content: public List<string> RemainingArguments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public ReadOnly Property RemainingArguments As List(Of String)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument
  id: ThrowOnUnexpectedArgument
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ThrowOnUnexpectedArgument
  nameWithType: CommandLineApplication.ThrowOnUnexpectedArgument
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ThrowOnUnexpectedArgument
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 231
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nIndicates whether the parser should throw an exception when it runs into an unexpected argument.\nIf this field is set to false, the parser will stop parsing when it sees an unexpected argument, and all\nremaining arguments, including the first unexpected argument, will be stored in RemainingArguments property.\n"
  example: []
  syntax:
    content: public bool ThrowOnUnexpectedArgument { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ThrowOnUnexpectedArgument As Boolean
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText
  id: UsePagerForHelpText
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: UsePagerForHelpText
  nameWithType: CommandLineApplication.UsePagerForHelpText
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: UsePagerForHelpText
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 175
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nWhether a Pager should be used to display help text.\n"
  example: []
  syntax:
    content: public bool UsePagerForHelpText { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property UsePagerForHelpText As Boolean
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation
  id: IsShowingInformation
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: IsShowingInformation
  nameWithType: CommandLineApplication.IsShowingInformation
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: IsShowingInformation
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 236
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nTrue when <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion\" data-throw-if-not-resolved=\"false\"></xref> was matched.\n"
  example: []
  syntax:
    content: public bool IsShowingInformation { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsShowingInformation As Boolean
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
  id: Invoke
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Invoke
  nameWithType: CommandLineApplication.Invoke
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Invoke
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 241
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe action to call when this command is matched and <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation\" data-throw-if-not-resolved=\"false\"></xref> is <code>false</code>.\n"
  example: []
  syntax:
    content: public Func<int> Invoke { get; set; }
    parameters: []
    return:
      type: System.Func{System.Int32}
    content.vb: Public Property Invoke As Func(Of Integer)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter
  id: LongVersionGetter
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: LongVersionGetter
  nameWithType: CommandLineApplication.LongVersionGetter
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: LongVersionGetter
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 246
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe long-form of the version to display in generated help text.\n"
  example: []
  syntax:
    content: public Func<string> LongVersionGetter { get; set; }
    parameters: []
    return:
      type: System.Func{System.String}
    content.vb: Public Property LongVersionGetter As Func(Of String)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter
  id: ShortVersionGetter
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ShortVersionGetter
  nameWithType: CommandLineApplication.ShortVersionGetter
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ShortVersionGetter
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 251
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe short-form of the version to display in generated help text.\n"
  example: []
  syntax:
    content: public Func<string> ShortVersionGetter { get; set; }
    parameters: []
    return:
      type: System.Func{System.String}
    content.vb: Public Property ShortVersionGetter As Func(Of String)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands
  id: Commands
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Commands
  nameWithType: CommandLineApplication.Commands
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Commands
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 256
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nSubcommands.\n"
  example: []
  syntax:
    content: public List<CommandLineApplication> Commands { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{McMaster.Extensions.CommandLineUtils.CommandLineApplication}
    content.vb: Public ReadOnly Property Commands As List(Of CommandLineApplication)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AllowArgumentSeparator
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AllowArgumentSeparator
  id: AllowArgumentSeparator
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: AllowArgumentSeparator
  nameWithType: CommandLineApplication.AllowArgumentSeparator
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AllowArgumentSeparator
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: AllowArgumentSeparator
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 261
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nDetermines if &apos;--&apos; can be used to separate known arguments and options from additional content passed to <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool AllowArgumentSeparator { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property AllowArgumentSeparator As Boolean
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AllowArgumentSeparator*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling
  id: ResponseFileHandling
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ResponseFileHandling
  nameWithType: CommandLineApplication.ResponseFileHandling
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ResponseFileHandling
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 275
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\n<p>\nWhen enabled, the parser will treat any arguments beginning with &apos;@&apos; as a file path to a response file.\nA response file contains additional arguments that will be treated as if they were passed in on the command line.\n</p>\n<p>\nDefaults to <xref href=\"McMaster.Extensions.CommandLineUtils.ResponseFileHandling.Disabled\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nNested response false are not supported.\n</p>\n"
  example: []
  syntax:
    content: public ResponseFileHandling ResponseFileHandling { get; set; }
    parameters: []
    return:
      type: McMaster.Extensions.CommandLineUtils.ResponseFileHandling
    content.vb: Public Property ResponseFileHandling As ResponseFileHandling
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionsComparison
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionsComparison
  id: OptionsComparison
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: OptionsComparison
  nameWithType: CommandLineApplication.OptionsComparison
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionsComparison
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: OptionsComparison
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 280
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe way arguments and options are matched.\n"
  example: []
  syntax:
    content: public StringComparison OptionsComparison { get; set; }
    parameters: []
    return:
      type: System.StringComparison
    content.vb: Public Property OptionsComparison As StringComparison
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionsComparison*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ClusterOptions
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ClusterOptions
  id: ClusterOptions
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ClusterOptions
  nameWithType: CommandLineApplication.ClusterOptions
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ClusterOptions
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ClusterOptions
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 308
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\n<p>\nOne or more options of <xref href=\"McMaster.Extensions.CommandLineUtils.CommandOptionType.NoValue\" data-throw-if-not-resolved=\"false\"></xref>, followed by at most one option that takes values, should be accepted when grouped behind one &apos;-&apos; delimiter.\n</p>\n<p>\nWhen true, the following are equivalent.\n\n<pre><code>-abcXyellow\n-abcX=yellow\n-abcX:yellow\n-abc -X=yellow\n-ab -cX=yellow\n-a -b -c -Xyellow\n-a -b -c -X yellow\n-a -b -c -X=yellow\n-a -b -c -X:yellow</code></pre>\n</p>\n<p>\nThis defaults to true unless an option with a short name of two or more characters is added.\n</p>\n"
  remarks: "\n<a href=\"https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\">https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html</a>\n"
  example: []
  syntax:
    content: public bool ClusterOptions { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ClusterOptions As Boolean
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ClusterOptions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValueParsers
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValueParsers
  id: ValueParsers
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ValueParsers
  nameWithType: CommandLineApplication.ValueParsers
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValueParsers
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ValueParsers
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 329
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nGets the default value parser provider.\n<p>\nThe value parsers control how argument values are converted from strings to other types. Additional value\nparsers can be added so that domain specific types can converted. In-built value parsers can also be replaced\nfor precise control of all type conversion.\n</p>\n<remarks>\nValue parsers are currently only used by the Attribute API.\n</remarks>\n"
  example: []
  syntax:
    content: public ValueParserProvider ValueParsers { get; }
    parameters: []
    return:
      type: McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider
    content.vb: Public ReadOnly Property ValueParsers As ValueParserProvider
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValueParsers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.WorkingDirectory
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.WorkingDirectory
  id: WorkingDirectory
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: WorkingDirectory
  nameWithType: CommandLineApplication.WorkingDirectory
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.WorkingDirectory
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: WorkingDirectory
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 339
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\n<p>\nDefines the working directory of the application. Defaults to <xref href=\"System.IO.Directory.GetCurrentDirectory\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nThis will be used as the base path for opening response files when <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling\" data-throw-if-not-resolved=\"false\"></xref> is <code>true</code>.\n</p>\n"
  example: []
  syntax:
    content: public string WorkingDirectory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property WorkingDirectory As String
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.WorkingDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Out
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Out
  id: Out
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Out
  nameWithType: CommandLineApplication.Out
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Out
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Out
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 344
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe writer used to display generated help text.\n"
  example: []
  syntax:
    content: public TextWriter Out { get; set; }
    parameters: []
    return:
      type: System.IO.TextWriter
    content.vb: Public Property Out As TextWriter
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Out*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Error
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Error
  id: Error
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: CommandLineApplication.Error
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Error
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Error
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 349
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe writer used to display generated error messages.\n"
  example: []
  syntax:
    content: public TextWriter Error { get; set; }
    parameters: []
    return:
      type: System.IO.TextWriter
    content.vb: Public Property Error As TextWriter
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Error*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
  id: GetOptions
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: GetOptions()
  nameWithType: CommandLineApplication.GetOptions()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions()
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: GetOptions
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 355
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nGets all command line options available to this command, including any inherited options.\n"
  example: []
  syntax:
    content: public IEnumerable<CommandOption> GetOptions()
    return:
      type: System.Collections.Generic.IEnumerable{McMaster.Extensions.CommandLineUtils.CommandOption}
      description: Command line options.
    content.vb: Public Function GetOptions As IEnumerable(Of CommandOption)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)
  id: AddName(System.String)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: AddName(String)
  nameWithType: CommandLineApplication.AddName(String)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: AddName
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 375
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdd another name for the command.\n<p>\nAdditional names can be shorter, longer, or alternative names by which a command may be invoked on the command line.\n</p>\n"
  example: []
  syntax:
    content: public void AddName(string name)
    parameters:
    - id: name
      type: System.String
      description: The name. Must not be null or empty.
    content.vb: Public Sub AddName(name As String)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddSubcommand(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddSubcommand(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  id: AddSubcommand(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: AddSubcommand(CommandLineApplication)
  nameWithType: CommandLineApplication.AddSubcommand(CommandLineApplication)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddSubcommand(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: AddSubcommand
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 391
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdd a subcommand\n"
  example: []
  syntax:
    content: public void AddSubcommand(CommandLineApplication subcommand)
    parameters:
    - id: subcommand
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    content.vb: Public Sub AddSubcommand(subcommand As CommandLineApplication)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddSubcommand*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication},System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication},System.Boolean)
  id: Command(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication},System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Command(String, Action<CommandLineApplication>, Boolean)
  nameWithType: CommandLineApplication.Command(String, Action<CommandLineApplication>, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command(System.String, System.Action<McMaster.Extensions.CommandLineUtils.CommandLineApplication>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Command
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 434
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a subcommand.\n"
  example: []
  syntax:
    content: public CommandLineApplication Command(string name, Action<CommandLineApplication> configuration, bool throwOnUnexpectedArg = true)
    parameters:
    - id: name
      type: System.String
      description: The word used to invoke the subcommand.
    - id: configuration
      type: System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication}
      description: ''
    - id: throwOnUnexpectedArg
      type: System.Boolean
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication
      description: ''
    content.vb: Public Function Command(name As String, configuration As Action(Of CommandLineApplication), throwOnUnexpectedArg As Boolean = True) As CommandLineApplication
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command*
  nameWithType.vb: CommandLineApplication.Command(String, Action(Of CommandLineApplication), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command(System.String, System.Action(Of McMaster.Extensions.CommandLineUtils.CommandLineApplication), System.Boolean)
  name.vb: Command(String, Action(Of CommandLineApplication), Boolean)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command``1(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication{``0}},System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command``1(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication{``0}},System.Boolean)
  id: Command``1(System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication{``0}},System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Command<TModel>(String, Action<CommandLineApplication<TModel>>, Boolean)
  nameWithType: CommandLineApplication.Command<TModel>(String, Action<CommandLineApplication<TModel>>, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command<TModel>(System.String, System.Action<McMaster.Extensions.CommandLineUtils.CommandLineApplication<TModel>>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Command
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 454
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a subcommand with model of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TModel</code>.\n"
  example: []
  syntax:
    content: >-
      public CommandLineApplication<TModel> Command<TModel>(string name, Action<CommandLineApplication<TModel>> configuration, bool throwOnUnexpectedArg = true)
          where TModel : class
    parameters:
    - id: name
      type: System.String
      description: The word used to invoke the subcommand.
    - id: configuration
      type: System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication{{TModel}}}
      description: ''
    - id: throwOnUnexpectedArg
      type: System.Boolean
      description: ''
    typeParameters:
    - id: TModel
      description: The model type of the subcommand.
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandLineApplication{{TModel}}
      description: ''
    content.vb: Public Function Command(Of TModel As Class)(name As String, configuration As Action(Of CommandLineApplication(Of TModel)), throwOnUnexpectedArg As Boolean = True) As CommandLineApplication(Of TModel)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command*
  nameWithType.vb: CommandLineApplication.Command(Of TModel)(String, Action(Of CommandLineApplication(Of TModel)), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command(Of TModel)(System.String, System.Action(Of McMaster.Extensions.CommandLineUtils.CommandLineApplication(Of TModel)), System.Boolean)
  name.vb: Command(Of TModel)(String, Action(Of CommandLineApplication(Of TModel)), Boolean)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  id: Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Option(String, String, CommandOptionType)
  nameWithType: CommandLineApplication.Option(String, String, CommandOptionType)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Option
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 474
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command-line option.\n"
  example: []
  syntax:
    content: public CommandOption Option(string template, string description, CommandOptionType optionType)
    parameters:
    - id: template
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: optionType
      type: McMaster.Extensions.CommandLineUtils.CommandOptionType
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: Public Function Option(template As String, description As String, optionType As CommandOptionType) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  id: Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Option(String, String, CommandOptionType, Boolean)
  nameWithType: CommandLineApplication.Option(String, String, CommandOptionType, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Option
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 485
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command-line option.\n"
  example: []
  syntax:
    content: public CommandOption Option(string template, string description, CommandOptionType optionType, bool inherited)
    parameters:
    - id: template
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: optionType
      type: McMaster.Extensions.CommandLineUtils.CommandOptionType
      description: ''
    - id: inherited
      type: System.Boolean
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: Public Function Option(template As String, description As String, optionType As CommandOptionType, inherited As Boolean) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  id: Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Option(String, String, CommandOptionType, Action<CommandOption>)
  nameWithType: CommandLineApplication.Option(String, String, CommandOptionType, Action<CommandOption>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action<McMaster.Extensions.CommandLineUtils.CommandOption>)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Option
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 496
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command-line option.\n"
  example: []
  syntax:
    content: public CommandOption Option(string template, string description, CommandOptionType optionType, Action<CommandOption> configuration)
    parameters:
    - id: template
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: optionType
      type: McMaster.Extensions.CommandLineUtils.CommandOptionType
      description: ''
    - id: configuration
      type: System.Action{McMaster.Extensions.CommandLineUtils.CommandOption}
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: Public Function Option(template As String, description As String, optionType As CommandOptionType, configuration As Action(Of CommandOption)) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option*
  nameWithType.vb: CommandLineApplication.Option(String, String, CommandOptionType, Action(Of CommandOption))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action(Of McMaster.Extensions.CommandLineUtils.CommandOption))
  name.vb: Option(String, String, CommandOptionType, Action(Of CommandOption))
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption},System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption},System.Boolean)
  id: Option(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption},System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Option(String, String, CommandOptionType, Action<CommandOption>, Boolean)
  nameWithType: CommandLineApplication.Option(String, String, CommandOptionType, Action<CommandOption>, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action<McMaster.Extensions.CommandLineUtils.CommandOption>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Option
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 508
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command line option.\n"
  example: []
  syntax:
    content: public CommandOption Option(string template, string description, CommandOptionType optionType, Action<CommandOption> configuration, bool inherited)
    parameters:
    - id: template
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: optionType
      type: McMaster.Extensions.CommandLineUtils.CommandOptionType
      description: ''
    - id: configuration
      type: System.Action{McMaster.Extensions.CommandLineUtils.CommandOption}
      description: ''
    - id: inherited
      type: System.Boolean
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: Public Function Option(template As String, description As String, optionType As CommandOptionType, configuration As Action(Of CommandOption), inherited As Boolean) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option*
  nameWithType.vb: CommandLineApplication.Option(String, String, CommandOptionType, Action(Of CommandOption), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action(Of McMaster.Extensions.CommandLineUtils.CommandOption), System.Boolean)
  name.vb: Option(String, String, CommandOptionType, Action(Of CommandOption), Boolean)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption},System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption},System.Boolean)
  id: Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption},System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Option<T>(String, String, CommandOptionType, Action<CommandOption>, Boolean)
  nameWithType: CommandLineApplication.Option<T>(String, String, CommandOptionType, Action<CommandOption>, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option<T>(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action<McMaster.Extensions.CommandLineUtils.CommandOption>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Option
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 530
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command line option with values that should be parsable into <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n"
  example: []
  syntax:
    content: public CommandOption<T> Option<T>(string template, string description, CommandOptionType optionType, Action<CommandOption> configuration, bool inherited)
    parameters:
    - id: template
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: optionType
      type: McMaster.Extensions.CommandLineUtils.CommandOptionType
      description: ''
    - id: configuration
      type: System.Action{McMaster.Extensions.CommandLineUtils.CommandOption}
      description: ''
    - id: inherited
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
      description: The type of the values on the option
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption{{T}}
      description: The option
    content.vb: Public Function Option(Of T)(template As String, description As String, optionType As CommandOptionType, configuration As Action(Of CommandOption), inherited As Boolean) As CommandOption(Of T)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option*
  nameWithType.vb: CommandLineApplication.Option(Of T)(String, String, CommandOptionType, Action(Of CommandOption), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option(Of T)(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action(Of McMaster.Extensions.CommandLineUtils.CommandOption), System.Boolean)
  name.vb: Option(Of T)(String, String, CommandOptionType, Action(Of CommandOption), Boolean)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String,System.String,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String,System.String,System.Boolean)
  id: Argument(System.String,System.String,System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Argument(String, String, Boolean)
  nameWithType: CommandLineApplication.Argument(String, String, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Argument
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 556
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command line argument\n"
  example: []
  syntax:
    content: public CommandArgument Argument(string name, string description, bool multipleValues = false)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: multipleValues
      type: System.Boolean
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandArgument
      description: ''
    content.vb: Public Function Argument(name As String, description As String, multipleValues As Boolean = False) As CommandArgument
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String,System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String,System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Boolean)
  id: Argument(System.String,System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Argument(String, String, Action<CommandArgument>, Boolean)
  nameWithType: CommandLineApplication.Argument(String, String, Action<CommandArgument>, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String, System.String, System.Action<McMaster.Extensions.CommandLineUtils.CommandArgument>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Argument
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 567
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command line argument.\n"
  example: []
  syntax:
    content: public CommandArgument Argument(string name, string description, Action<CommandArgument> configuration, bool multipleValues = false)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: configuration
      type: System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument}
      description: ''
    - id: multipleValues
      type: System.Boolean
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandArgument
      description: ''
    content.vb: Public Function Argument(name As String, description As String, configuration As Action(Of CommandArgument), multipleValues As Boolean = False) As CommandArgument
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument*
  nameWithType.vb: CommandLineApplication.Argument(String, String, Action(Of CommandArgument), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(System.String, System.String, System.Action(Of McMaster.Extensions.CommandLineUtils.CommandArgument), System.Boolean)
  name.vb: Argument(String, String, Action(Of CommandArgument), Boolean)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument``1(System.String,System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument``1(System.String,System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Boolean)
  id: Argument``1(System.String,System.String,System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument},System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Argument<T>(String, String, Action<CommandArgument>, Boolean)
  nameWithType: CommandLineApplication.Argument<T>(String, String, Action<CommandArgument>, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument<T>(System.String, System.String, System.Action<McMaster.Extensions.CommandLineUtils.CommandArgument>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Argument
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 589
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds a command line argument with values that should be parsable into <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>.\n"
  example: []
  syntax:
    content: public CommandArgument<T> Argument<T>(string name, string description, Action<CommandArgument> configuration, bool multipleValues = false)
    parameters:
    - id: name
      type: System.String
      description: ''
    - id: description
      type: System.String
      description: ''
    - id: configuration
      type: System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument}
      description: ''
    - id: multipleValues
      type: System.Boolean
      description: ''
    typeParameters:
    - id: T
      description: The type of the values on the option
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandArgument{{T}}
      description: ''
    content.vb: Public Function Argument(Of T)(name As String, description As String, configuration As Action(Of CommandArgument), multipleValues As Boolean = False) As CommandArgument(Of T)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument*
  nameWithType.vb: CommandLineApplication.Argument(Of T)(String, String, Action(Of CommandArgument), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument(Of T)(System.String, System.String, System.Action(Of McMaster.Extensions.CommandLineUtils.CommandArgument), System.Boolean)
  name.vb: Argument(Of T)(String, String, Action(Of CommandArgument), Boolean)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})
  id: OnExecute(System.Func{System.Int32})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: OnExecute(Func<Int32>)
  nameWithType: CommandLineApplication.OnExecute(Func<Int32>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func<System.Int32>)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: OnExecute
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 623
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nDefines a callback for when this command is invoked.\n"
  example: []
  syntax:
    content: public void OnExecute(Func<int> invoke)
    parameters:
    - id: invoke
      type: System.Func{System.Int32}
      description: ''
    content.vb: Public Sub OnExecute(invoke As Func(Of Integer))
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute*
  nameWithType.vb: CommandLineApplication.OnExecute(Func(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func(Of System.Int32))
  name.vb: OnExecute(Func(Of Int32))
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Threading.Tasks.Task{System.Int32}})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Threading.Tasks.Task{System.Int32}})
  id: OnExecute(System.Func{System.Threading.Tasks.Task{System.Int32}})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: OnExecute(Func<Task<Int32>>)
  nameWithType: CommandLineApplication.OnExecute(Func<Task<Int32>>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func<System.Threading.Tasks.Task<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: OnExecute
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 632
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nDefines an asynchronous callback.\n"
  example: []
  syntax:
    content: public void OnExecute(Func<Task<int>> invoke)
    parameters:
    - id: invoke
      type: System.Func{System.Threading.Tasks.Task{System.Int32}}
      description: ''
    content.vb: Public Sub OnExecute(invoke As Func(Of Task(Of Integer)))
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute*
  nameWithType.vb: CommandLineApplication.OnExecute(Func(Of Task(Of Int32)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func(Of System.Threading.Tasks.Task(Of System.Int32)))
  name.vb: OnExecute(Func(Of Task(Of Int32)))
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnParsingComplete(System.Action{McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnParsingComplete(System.Action{McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult})
  id: OnParsingComplete(System.Action{McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: OnParsingComplete(Action<ParseResult>)
  nameWithType: CommandLineApplication.OnParsingComplete(Action<ParseResult>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnParsingComplete(System.Action<McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult>)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: OnParsingComplete
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 641
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nAdds an action to be invoked when all command line arguments have been parsed and validated.\n"
  example: []
  syntax:
    content: public void OnParsingComplete(Action<ParseResult> action)
    parameters:
    - id: action
      type: System.Action{McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult}
      description: The action to be invoked
    content.vb: Public Sub OnParsingComplete(action As Action(Of ParseResult))
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnParsingComplete*
  nameWithType.vb: CommandLineApplication.OnParsingComplete(Action(Of ParseResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnParsingComplete(System.Action(Of McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult))
  name.vb: OnParsingComplete(Action(Of ParseResult))
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])
  id: Parse(System.String[])
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Parse(String[])
  nameWithType: CommandLineApplication.Parse(String[])
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Parse
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 657
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nParses an array of strings, matching them against <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ParseResult Parse(params string[] args)
    parameters:
    - id: args
      type: System.String[]
      description: Command line arguments.
    return:
      type: McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult
      description: The result of parsing.
    content.vb: Public Function Parse(ParamArray args As String()) As ParseResult
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse*
  nameWithType.vb: CommandLineApplication.Parse(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String())
  name.vb: Parse(String())
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.MakeSuggestionsInErrorMessage
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.MakeSuggestionsInErrorMessage
  id: MakeSuggestionsInErrorMessage
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: MakeSuggestionsInErrorMessage
  nameWithType: CommandLineApplication.MakeSuggestionsInErrorMessage
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.MakeSuggestionsInErrorMessage
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: MakeSuggestionsInErrorMessage
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 679
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nWhen an invalid argument is given, make suggestions in the error message\nabout similar, valid commands or options.\n<p>\n$ git pshu\nSpecify --help for a list of available options and commands\nUnrecognized command or argument &apos;pshu&apos;\n\nDid you mean this?\n    push\n</p>\n"
  example: []
  syntax:
    content: public bool MakeSuggestionsInErrorMessage { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property MakeSuggestionsInErrorMessage As Boolean
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.MakeSuggestionsInErrorMessage*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HandleParseResult(McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HandleParseResult(McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult)
  id: HandleParseResult(McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: HandleParseResult(ParseResult)
  nameWithType: CommandLineApplication.HandleParseResult(ParseResult)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HandleParseResult(McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: HandleParseResult
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 685
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nHandle the result of parsing command line arguments.\n"
  example: []
  syntax:
    content: protected virtual void HandleParseResult(ParseResult parseResult)
    parameters:
    - id: parseResult
      type: McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult
      description: The parse result.
    content.vb: Protected Overridable Sub HandleParseResult(parseResult As ParseResult)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HandleParseResult*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(System.String[])
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(System.String[])
  id: Execute(System.String[])
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Execute(String[])
  nameWithType: CommandLineApplication.Execute(String[])
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(System.String[])
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Execute
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 738
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nParses an array of strings using <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>.\n<p>\nIf <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp\" data-throw-if-not-resolved=\"false\"></xref> was matched, the generated help text is displayed in command line output.\n</p>\n<p>\nIf <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion\" data-throw-if-not-resolved=\"false\"></xref> was matched, the generated version info is displayed in command line output.\n</p>\n<p>\nIf there were any validation errors produced from <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler\" data-throw-if-not-resolved=\"false\"></xref> is invoked.\n</p>\n<p>\nIf the parse result matches this command, <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke\" data-throw-if-not-resolved=\"false\"></xref> will be invoked.\n</p>\n"
  example: []
  syntax:
    content: public int Execute(params string[] args)
    parameters:
    - id: args
      type: System.String[]
      description: ''
    return:
      type: System.Int32
      description: The return code from <xref href="McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function Execute(ParamArray args As String()) As Integer
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute*
  nameWithType.vb: CommandLineApplication.Execute(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(System.String())
  name.vb: Execute(String())
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)
  id: HelpOption(System.String)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: HelpOption(String)
  nameWithType: CommandLineApplication.HelpOption(String)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: HelpOption
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 762
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nHelper method that adds a help option.\n"
  example: []
  syntax:
    content: public CommandOption HelpOption(string template)
    parameters:
    - id: template
      type: System.String
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: Public Function HelpOption(template As String) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String,System.Boolean)
  id: HelpOption(System.String,System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: HelpOption(String, Boolean)
  nameWithType: CommandLineApplication.HelpOption(String, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: HelpOption
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 771
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nHelper method that adds a help option.\n"
  example: []
  syntax:
    content: public CommandOption HelpOption(string template, bool inherited)
    parameters:
    - id: template
      type: System.String
      description: ''
    - id: inherited
      type: System.Boolean
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: Public Function HelpOption(template As String, inherited As Boolean) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.String,System.String)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.String,System.String)
  id: VersionOption(System.String,System.String,System.String)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: VersionOption(String, String, String)
  nameWithType: CommandLineApplication.VersionOption(String, String, String)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: VersionOption
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 787
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nHelper method that adds a version option from known versions strings.\n"
  example: []
  syntax:
    content: public CommandOption VersionOption(string template, string shortFormVersion, string longFormVersion = null)
    parameters:
    - id: template
      type: System.String
      description: ''
    - id: shortFormVersion
      type: System.String
      description: ''
    - id: longFormVersion
      type: System.String
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: Public Function VersionOption(template As String, shortFormVersion As String, longFormVersion As String = Nothing) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.Func{System.String},System.Func{System.String})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.Func{System.String},System.Func{System.String})
  id: VersionOption(System.String,System.Func{System.String},System.Func{System.String})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: VersionOption(String, Func<String>, Func<String>)
  nameWithType: CommandLineApplication.VersionOption(String, Func<String>, Func<String>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String, System.Func<System.String>, System.Func<System.String>)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: VersionOption
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 808
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nHelper method that adds a version option.\n"
  example: []
  syntax:
    content: public CommandOption VersionOption(string template, Func<string> shortFormVersionGetter, Func<string> longFormVersionGetter = null)
    parameters:
    - id: template
      type: System.String
      description: ''
    - id: shortFormVersionGetter
      type: System.Func{System.String}
      description: ''
    - id: longFormVersionGetter
      type: System.Func{System.String}
      description: ''
    return:
      type: McMaster.Extensions.CommandLineUtils.CommandOption
      description: ''
    content.vb: Public Function VersionOption(template As String, shortFormVersionGetter As Func(Of String), longFormVersionGetter As Func(Of String) = Nothing) As CommandOption
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption*
  nameWithType.vb: CommandLineApplication.VersionOption(String, Func(Of String), Func(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String, System.Func(Of System.String), System.Func(Of System.String))
  name.vb: VersionOption(String, Func(Of String), Func(Of String))
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHint
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHint
  id: ShowHint
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ShowHint()
  nameWithType: CommandLineApplication.ShowHint()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHint()
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ShowHint
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 824
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nShow short hint that reminds users to use help option.\n"
  example: []
  syntax:
    content: public virtual void ShowHint()
    content.vb: Public Overridable Sub ShowHint
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHint*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp
  id: ShowHelp
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ShowHelp()
  nameWithType: CommandLineApplication.ShowHelp()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp()
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ShowHelp
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 841
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nShow full help.\n"
  example: []
  syntax:
    content: public void ShowHelp()
    content.vb: Public Sub ShowHelp
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp(System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp(System.Boolean)
  id: ShowHelp(System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ShowHelp(Boolean)
  nameWithType: CommandLineApplication.ShowHelp(Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp(System.Boolean)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ShowHelp
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 847
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nShow full help.\n"
  example: []
  syntax:
    content: public void ShowHelp(bool usePager)
    parameters:
    - id: usePager
      type: System.Boolean
      description: Use a console pager to display help text, if possible.
    content.vb: Public Sub ShowHelp(usePager As Boolean)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText
  id: GetHelpText
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: GetHelpText()
  nameWithType: CommandLineApplication.GetHelpText()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText()
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: GetHelpText
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 905
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nProduces help text describing command usage.\n"
  example: []
  syntax:
    content: public virtual string GetHelpText()
    return:
      type: System.String
      description: The help text.
    content.vb: Public Overridable Function GetHelpText As String
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowVersion
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowVersion
  id: ShowVersion
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ShowVersion()
  nameWithType: CommandLineApplication.ShowVersion()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowVersion()
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ShowVersion
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 946
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nDisplays version information that includes <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void ShowVersion()
    content.vb: Public Sub ShowVersion
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowVersion*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetVersionText
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetVersionText
  id: GetVersionText
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: GetVersionText()
  nameWithType: CommandLineApplication.GetVersionText()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetVersionText()
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: GetVersionText
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 960
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nProduces text describing version of the command.\n"
  example: []
  syntax:
    content: public virtual string GetVersionText()
    return:
      type: System.String
      description: The version text.
    content.vb: Public Overridable Function GetVersionText As String
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetVersionText*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
  id: GetFullNameAndVersion
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: GetFullNameAndVersion()
  nameWithType: CommandLineApplication.GetFullNameAndVersion()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion()
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: GetFullNameAndVersion
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 977
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nGets <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual string GetFullNameAndVersion()
    return:
      type: System.String
      description: ''
    content.vb: Public Overridable Function GetFullNameAndVersion As String
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowRootCommandFullNameAndVersion
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowRootCommandFullNameAndVersion
  id: ShowRootCommandFullNameAndVersion
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ShowRootCommandFullNameAndVersion()
  nameWithType: CommandLineApplication.ShowRootCommandFullNameAndVersion()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowRootCommandFullNameAndVersion()
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ShowRootCommandFullNameAndVersion
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 991
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nTraverses up <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent\" data-throw-if-not-resolved=\"false\"></xref> and displays the result of <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void ShowRootCommandFullNameAndVersion()
    content.vb: Public Sub ShowRootCommandFullNameAndVersion
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowRootCommandFullNameAndVersion*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Conventions
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Conventions
  id: Conventions
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Conventions
  nameWithType: CommandLineApplication.Conventions
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Conventions
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Conventions
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 1042
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nGets a builder that can be used to apply conventions to\n"
  example: []
  syntax:
    content: public IConventionBuilder Conventions { get; }
    parameters: []
    return:
      type: McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder
    content.vb: Public ReadOnly Property Conventions As IConventionBuilder
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Conventions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Dispose
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Dispose
  id: Dispose
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: CommandLineApplication.Dispose()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Dispose()
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Dispose
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 1079
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  example: []
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.System#IServiceProvider#GetService(System.Type)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.System#IServiceProvider#GetService(System.Type)
  id: System#IServiceProvider#GetService(System.Type)
  isEii: true
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: IServiceProvider.GetService(Type)
  nameWithType: CommandLineApplication.IServiceProvider.GetService(Type)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.System.IServiceProvider.GetService(System.Type)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: System.IServiceProvider.GetService
    path: ../src/CommandLineUtils/CommandLineApplication.cs
    startLine: 1092
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  syntax:
    content: object IServiceProvider.GetService(Type serviceType)
    parameters:
    - id: serviceType
      type: System.Type
    return:
      type: System.Object
    content.vb: Function System.IServiceProvider.GetService(serviceType As Type) As Object Implements IServiceProvider.GetService
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.System#IServiceProvider#GetService*
  implements:
  - System.IServiceProvider.GetService(System.Type)
  nameWithType.vb: CommandLineApplication.System.IServiceProvider.GetService(Type)
  name.vb: System.IServiceProvider.GetService(Type)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  id: Execute``1(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Execute<TApp>(CommandLineContext)
  nameWithType: CommandLineApplication.Execute<TApp>(CommandLineContext)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute<TApp>(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.Execute.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Execute
    path: ../src/CommandLineUtils/CommandLineApplication.Execute.cs
    startLine: 28
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nCreates an instance of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApp</code>, matching <xref href=\"McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.Arguments\" data-throw-if-not-resolved=\"false\"></xref>\nto all attributes on the type, and then invoking a method named &quot;OnExecute&quot; or &quot;OnExecuteAsync&quot; if it exists.\nSee <xref href=\"McMaster.Extensions.CommandLineUtils.OptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"McMaster.Extensions.CommandLineUtils.ArgumentAttribute\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"McMaster.Extensions.CommandLineUtils.HelpOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"McMaster.Extensions.CommandLineUtils.VersionOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static int Execute<TApp>(CommandLineContext context)
          where TApp : class
    parameters:
    - id: context
      type: McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext
      description: The execution context.
    typeParameters:
    - id: TApp
      description: A type that should be bound to the arguments.
    return:
      type: System.Int32
      description: The process exit code
    content.vb: Public Shared Function Execute(Of TApp As Class)(context As CommandLineContext) As Integer
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when attributes are incorrectly configured.
  nameWithType.vb: CommandLineApplication.Execute(Of TApp)(CommandLineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(Of TApp)(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  name.vb: Execute(Of TApp)(CommandLineContext)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(System.String[])
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(System.String[])
  id: Execute``1(System.String[])
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Execute<TApp>(String[])
  nameWithType: CommandLineApplication.Execute<TApp>(String[])
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute<TApp>(System.String[])
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.Execute.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Execute
    path: ../src/CommandLineUtils/CommandLineApplication.Execute.cs
    startLine: 85
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nCreates an instance of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApp</code>, matching <code data-dev-comment-type=\"paramref\" class=\"paramref\">args</code>\nto all attributes on the type, and then invoking a method named &quot;OnExecute&quot; or &quot;OnExecuteAsync&quot; if it exists.\nSee <xref href=\"McMaster.Extensions.CommandLineUtils.OptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"McMaster.Extensions.CommandLineUtils.ArgumentAttribute\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"McMaster.Extensions.CommandLineUtils.HelpOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"McMaster.Extensions.CommandLineUtils.VersionOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static int Execute<TApp>(params string[] args)
          where TApp : class
    parameters:
    - id: args
      type: System.String[]
      description: The arguments
    typeParameters:
    - id: TApp
      description: A type that should be bound to the arguments.
    return:
      type: System.Int32
      description: The process exit code
    content.vb: Public Shared Function Execute(Of TApp As Class)(ParamArray args As String()) As Integer
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when attributes are incorrectly configured.
  nameWithType.vb: CommandLineApplication.Execute(Of TApp)(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(Of TApp)(System.String())
  name.vb: Execute(Of TApp)(String())
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(McMaster.Extensions.CommandLineUtils.IConsole,System.String[])
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute``1(McMaster.Extensions.CommandLineUtils.IConsole,System.String[])
  id: Execute``1(McMaster.Extensions.CommandLineUtils.IConsole,System.String[])
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Execute<TApp>(IConsole, String[])
  nameWithType: CommandLineApplication.Execute<TApp>(IConsole, String[])
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute<TApp>(McMaster.Extensions.CommandLineUtils.IConsole, System.String[])
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.Execute.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Execute
    path: ../src/CommandLineUtils/CommandLineApplication.Execute.cs
    startLine: 100
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nCreates an instance of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApp</code>, matching <code data-dev-comment-type=\"paramref\" class=\"paramref\">args</code>\nto all attributes on the type, and then invoking a method named &quot;OnExecute&quot; or &quot;OnExecuteAsync&quot; if it exists.\nSee <xref href=\"McMaster.Extensions.CommandLineUtils.OptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"McMaster.Extensions.CommandLineUtils.ArgumentAttribute\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"McMaster.Extensions.CommandLineUtils.HelpOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"McMaster.Extensions.CommandLineUtils.VersionOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static int Execute<TApp>(IConsole console, params string[] args)
          where TApp : class
    parameters:
    - id: console
      type: McMaster.Extensions.CommandLineUtils.IConsole
      description: The console to use
    - id: args
      type: System.String[]
      description: The arguments
    typeParameters:
    - id: TApp
      description: A type that should be bound to the arguments.
    return:
      type: System.Int32
      description: The process exit code
    content.vb: Public Shared Function Execute(Of TApp As Class)(console As IConsole, ParamArray args As String()) As Integer
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when attributes are incorrectly configured.
  nameWithType.vb: CommandLineApplication.Execute(Of TApp)(IConsole, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(Of TApp)(McMaster.Extensions.CommandLineUtils.IConsole, System.String())
  name.vb: Execute(Of TApp)(IConsole, String())
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(System.String[])
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(System.String[])
  id: ExecuteAsync``1(System.String[])
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TApp>(String[])
  nameWithType: CommandLineApplication.ExecuteAsync<TApp>(String[])
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync<TApp>(System.String[])
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.Execute.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ExecuteAsync
    path: ../src/CommandLineUtils/CommandLineApplication.Execute.cs
    startLine: 118
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nCreates an instance of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApp</code>, matching <code data-dev-comment-type=\"paramref\" class=\"paramref\">args</code>\nto all attributes on the type, and then invoking a method named &quot;OnExecute&quot; or &quot;OnExecuteAsync&quot; if it exists.\nSee <xref href=\"McMaster.Extensions.CommandLineUtils.OptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"McMaster.Extensions.CommandLineUtils.ArgumentAttribute\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"McMaster.Extensions.CommandLineUtils.HelpOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"McMaster.Extensions.CommandLineUtils.VersionOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static Task<int> ExecuteAsync<TApp>(params string[] args)
          where TApp : class
    parameters:
    - id: args
      type: System.String[]
      description: The arguments
    typeParameters:
    - id: TApp
      description: A type that should be bound to the arguments.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The process exit code
    content.vb: Public Shared Function ExecuteAsync(Of TApp As Class)(ParamArray args As String()) As Task(Of Integer)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when attributes are incorrectly configured.
  nameWithType.vb: CommandLineApplication.ExecuteAsync(Of TApp)(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync(Of TApp)(System.String())
  name.vb: ExecuteAsync(Of TApp)(String())
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(McMaster.Extensions.CommandLineUtils.IConsole,System.String[])
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(McMaster.Extensions.CommandLineUtils.IConsole,System.String[])
  id: ExecuteAsync``1(McMaster.Extensions.CommandLineUtils.IConsole,System.String[])
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TApp>(IConsole, String[])
  nameWithType: CommandLineApplication.ExecuteAsync<TApp>(IConsole, String[])
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync<TApp>(McMaster.Extensions.CommandLineUtils.IConsole, System.String[])
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.Execute.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ExecuteAsync
    path: ../src/CommandLineUtils/CommandLineApplication.Execute.cs
    startLine: 133
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nCreates an instance of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApp</code>, matching <code data-dev-comment-type=\"paramref\" class=\"paramref\">args</code>\nto all attributes on the type, and then invoking a method named &quot;OnExecute&quot; or &quot;OnExecuteAsync&quot; if it exists.\nSee <xref href=\"McMaster.Extensions.CommandLineUtils.OptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"McMaster.Extensions.CommandLineUtils.ArgumentAttribute\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"McMaster.Extensions.CommandLineUtils.HelpOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"McMaster.Extensions.CommandLineUtils.VersionOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static Task<int> ExecuteAsync<TApp>(IConsole console, params string[] args)
          where TApp : class
    parameters:
    - id: console
      type: McMaster.Extensions.CommandLineUtils.IConsole
      description: The console to use
    - id: args
      type: System.String[]
      description: The arguments
    typeParameters:
    - id: TApp
      description: A type that should be bound to the arguments.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The process exit code
    content.vb: Public Shared Function ExecuteAsync(Of TApp As Class)(console As IConsole, ParamArray args As String()) As Task(Of Integer)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when attributes are incorrectly configured.
  nameWithType.vb: CommandLineApplication.ExecuteAsync(Of TApp)(IConsole, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync(Of TApp)(McMaster.Extensions.CommandLineUtils.IConsole, System.String())
  name.vb: ExecuteAsync(Of TApp)(IConsole, String())
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync``1(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  id: ExecuteAsync``1(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TApp>(CommandLineContext)
  nameWithType: CommandLineApplication.ExecuteAsync<TApp>(CommandLineContext)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync<TApp>(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.Execute.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ExecuteAsync
    path: ../src/CommandLineUtils/CommandLineApplication.Execute.cs
    startLine: 151
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nCreates an instance of <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApp</code>, matching <xref href=\"McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.Arguments\" data-throw-if-not-resolved=\"false\"></xref>\nto all attributes on the type, and then invoking a method named &quot;OnExecute&quot; or &quot;OnExecuteAsync&quot; if it exists.\nSee <xref href=\"McMaster.Extensions.CommandLineUtils.OptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"McMaster.Extensions.CommandLineUtils.ArgumentAttribute\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"McMaster.Extensions.CommandLineUtils.HelpOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"McMaster.Extensions.CommandLineUtils.VersionOptionAttribute\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static Task<int> ExecuteAsync<TApp>(CommandLineContext context)
          where TApp : class
    parameters:
    - id: context
      type: McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext
      description: The execution context.
    typeParameters:
    - id: TApp
      description: A type that should be bound to the arguments.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The process exit code
    content.vb: Public Shared Function ExecuteAsync(Of TApp As Class)(context As CommandLineContext) As Task(Of Integer)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when attributes are incorrectly configured.
  nameWithType.vb: CommandLineApplication.ExecuteAsync(Of TApp)(CommandLineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync(Of TApp)(McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext)
  name.vb: ExecuteAsync(Of TApp)(CommandLineContext)
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler
  id: ValidationErrorHandler
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: ValidationErrorHandler
  nameWithType: CommandLineApplication.ValidationErrorHandler
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.Validation.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: ValidationErrorHandler
    path: ../src/CommandLineUtils/CommandLineApplication.Validation.cs
    startLine: 18
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nThe action to call when the command executes, but there was an error validation options or arguments.\nThe action can return a new validation result.\n"
  example: []
  syntax:
    content: public Func<ValidationResult, int> ValidationErrorHandler { get; set; }
    parameters: []
    return:
      type: System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32}
    content.vb: Public Property ValidationErrorHandler As Func(Of ValidationResult, Integer)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Validators
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Validators
  id: Validators
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: Validators
  nameWithType: CommandLineApplication.Validators
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Validators
  type: Property
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.Validation.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: Validators
    path: ../src/CommandLineUtils/CommandLineApplication.Validation.cs
    startLine: 28
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nA collection of validators that execute before invoking <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func%7bSystem.Int32%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\nWhen validation fails, <xref href=\"McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler\" data-throw-if-not-resolved=\"false\"></xref> is invoked.\n"
  example: []
  syntax:
    content: public ICollection<ICommandValidator> Validators { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator}
    content.vb: Public ReadOnly Property Validators As ICollection(Of ICommandValidator)
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Validators*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
  id: GetValidationResult
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  langs:
  - csharp
  - vb
  name: GetValidationResult()
  nameWithType: CommandLineApplication.GetValidationResult()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult()
  type: Method
  source:
    remote:
      path: src/CommandLineUtils/CommandLineApplication.Validation.cs
      branch: master
      repo: https://github.com/natemcmaster/CommandLineutils
    id: GetValidationResult
    path: ../src/CommandLineUtils/CommandLineApplication.Validation.cs
    startLine: 34
  assemblies:
  - McMaster.Extensions.CommandLineUtils
  namespace: McMaster.Extensions.CommandLineUtils
  summary: "\nValidates arguments and options.\n"
  example: []
  syntax:
    content: public ValidationResult GetValidationResult()
    return:
      type: System.ComponentModel.DataAnnotations.ValidationResult
      description: The first validation result that is not <xref href="System.ComponentModel.DataAnnotations.ValidationResult.Success" data-throw-if-not-resolved="false"></xref> if there is an error.
    content.vb: Public Function GetValidationResult As ValidationResult
  overload: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandLineApplication
  parent: McMaster.Extensions.CommandLineUtils
  name: CommandLineApplication
  nameWithType: CommandLineApplication
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
- uid: McMaster.Extensions.CommandLineUtils
  commentId: N:McMaster.Extensions.CommandLineUtils
  name: McMaster.Extensions.CommandLineUtils
  nameWithType: McMaster.Extensions.CommandLineUtils
  fullName: McMaster.Extensions.CommandLineUtils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(System.String,System.String,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)
  name: Argument<T>(String, String, Boolean)
  nameWithType: CommandLineApplicationExtensions.Argument<T>(String, String, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument<T>(System.String, System.String, System.Boolean)
  nameWithType.vb: CommandLineApplicationExtensions.Argument(Of T)(String, String, Boolean)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument(Of T)(System.String, System.String, System.Boolean)
  name.vb: Argument(Of T)(String, String, Boolean)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(System.String,System.String,System.Boolean)
    name: Argument<T>
    nameWithType: CommandLineApplicationExtensions.Argument<T>
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(System.String,System.String,System.Boolean)
    name: Argument(Of T)
    nameWithType: CommandLineApplicationExtensions.Argument(Of T)
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  name: Option<T>(String, String, CommandOptionType)
  nameWithType: CommandLineApplicationExtensions.Option<T>(String, String, CommandOptionType)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType)
  nameWithType.vb: CommandLineApplicationExtensions.Option(Of T)(String, String, CommandOptionType)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType)
  name.vb: Option(Of T)(String, String, CommandOptionType)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
    name: Option<T>
    nameWithType: CommandLineApplicationExtensions.Option<T>
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
    name: Option(Of T)
    nameWithType: CommandLineApplicationExtensions.Option(Of T)
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  name: Option<T>(String, String, CommandOptionType, Boolean)
  nameWithType: CommandLineApplicationExtensions.Option<T>(String, String, CommandOptionType, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Boolean)
  nameWithType.vb: CommandLineApplicationExtensions.Option(Of T)(String, String, CommandOptionType, Boolean)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Boolean)
  name.vb: Option(Of T)(String, String, CommandOptionType, Boolean)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
    name: Option<T>
    nameWithType: CommandLineApplicationExtensions.Option<T>
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
    name: Option(Of T)
    nameWithType: CommandLineApplicationExtensions.Option(Of T)
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  name: Option<T>(String, String, CommandOptionType, Action<CommandOption>)
  nameWithType: CommandLineApplicationExtensions.Option<T>(String, String, CommandOptionType, Action<CommandOption>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action<McMaster.Extensions.CommandLineUtils.CommandOption>)
  nameWithType.vb: CommandLineApplicationExtensions.Option(Of T)(String, String, CommandOptionType, Action(Of CommandOption))
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)(System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action(Of McMaster.Extensions.CommandLineUtils.CommandOption))
  name.vb: Option(Of T)(String, String, CommandOptionType, Action(Of CommandOption))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
    name: Option<T>
    nameWithType: CommandLineApplicationExtensions.Option<T>
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
    name: Option(Of T)
    nameWithType: CommandLineApplicationExtensions.Option(Of T)
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  name: HelpOption()
  nameWithType: CommandLineApplicationExtensions.HelpOption()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption()
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
    name: HelpOption
    nameWithType: CommandLineApplicationExtensions.HelpOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
    name: HelpOption
    nameWithType: CommandLineApplicationExtensions.HelpOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)
  name: HelpOption(Boolean)
  nameWithType: CommandLineApplicationExtensions.HelpOption(Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(System.Boolean)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(System.Boolean)
    name: HelpOption
    nameWithType: CommandLineApplicationExtensions.HelpOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(System.Boolean)
    name: HelpOption
    nameWithType: CommandLineApplicationExtensions.HelpOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  name: VerboseOption()
  nameWithType: CommandLineApplicationExtensions.VerboseOption()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption()
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
    name: VerboseOption
    nameWithType: CommandLineApplicationExtensions.VerboseOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
    name: VerboseOption
    nameWithType: CommandLineApplicationExtensions.VerboseOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(System.String)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)
  name: VerboseOption(String)
  nameWithType: CommandLineApplicationExtensions.VerboseOption(String)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(System.String)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(System.String)
    name: VerboseOption
    nameWithType: CommandLineApplicationExtensions.VerboseOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(System.String)
    name: VerboseOption
    nameWithType: CommandLineApplicationExtensions.VerboseOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Func{System.Threading.Tasks.Task})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})
  name: OnExecute(Func<Task>)
  nameWithType: CommandLineApplicationExtensions.OnExecute(Func<Task>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: CommandLineApplicationExtensions.OnExecute(Func(Of Task))
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Func(Of System.Threading.Tasks.Task))
  name.vb: OnExecute(Func(Of Task))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Func{System.Threading.Tasks.Task})
    name: OnExecute
    nameWithType: CommandLineApplicationExtensions.OnExecute
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Func{System.Threading.Tasks.Task})
    name: OnExecute
    nameWithType: CommandLineApplicationExtensions.OnExecute
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Action)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)
  name: OnExecute(Action)
  nameWithType: CommandLineApplicationExtensions.OnExecute(Action)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Action)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Action)
    name: OnExecute
    nameWithType: CommandLineApplicationExtensions.OnExecute
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(System.Action)
    name: OnExecute
    nameWithType: CommandLineApplicationExtensions.OnExecute
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
  name: OnValidationError(Func<ValidationResult, Int32>)
  nameWithType: CommandLineApplicationExtensions.OnValidationError(Func<ValidationResult, Int32>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Func<System.ComponentModel.DataAnnotations.ValidationResult, System.Int32>)
  nameWithType.vb: CommandLineApplicationExtensions.OnValidationError(Func(Of ValidationResult, Int32))
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Func(Of System.ComponentModel.DataAnnotations.ValidationResult, System.Int32))
  name.vb: OnValidationError(Func(Of ValidationResult, Int32))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
    name: OnValidationError
    nameWithType: CommandLineApplicationExtensions.OnValidationError
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
    name: OnValidationError
    nameWithType: CommandLineApplicationExtensions.OnValidationError
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
  name: OnValidationError(Action<ValidationResult>)
  nameWithType: CommandLineApplicationExtensions.OnValidationError(Action<ValidationResult>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Action<System.ComponentModel.DataAnnotations.ValidationResult>)
  nameWithType.vb: CommandLineApplicationExtensions.OnValidationError(Action(Of ValidationResult))
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Action(Of System.ComponentModel.DataAnnotations.ValidationResult))
  name.vb: OnValidationError(Action(Of ValidationResult))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
    name: OnValidationError
    nameWithType: CommandLineApplicationExtensions.OnValidationError
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
    name: OnValidationError
    nameWithType: CommandLineApplicationExtensions.OnValidationError
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(System.Reflection.Assembly)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)
  name: VersionOptionFromAssemblyAttributes(Assembly)
  nameWithType: CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(Assembly)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(System.Reflection.Assembly)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(System.Reflection.Assembly)
    name: VersionOptionFromAssemblyAttributes
    nameWithType: CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(System.Reflection.Assembly)
    name: VersionOptionFromAssemblyAttributes
    nameWithType: CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})
  commentId: M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})
  parent: McMaster.Extensions.CommandLineUtils.ValidationExtensions
  definition: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})
  name: OnValidate(Func<ValidationContext, ValidationResult>)
  nameWithType: ValidationExtensions.OnValidate(Func<ValidationContext, ValidationResult>)
  fullName: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(System.Func<System.ComponentModel.DataAnnotations.ValidationContext, System.ComponentModel.DataAnnotations.ValidationResult>)
  nameWithType.vb: ValidationExtensions.OnValidate(Func(Of ValidationContext, ValidationResult))
  fullName.vb: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(System.Func(Of System.ComponentModel.DataAnnotations.ValidationContext, System.ComponentModel.DataAnnotations.ValidationResult))
  name.vb: OnValidate(Func(Of ValidationContext, ValidationResult))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})
    name: OnValidate
    nameWithType: ValidationExtensions.OnValidate
    fullName: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    nameWithType: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})
    name: OnValidate
    nameWithType: ValidationExtensions.OnValidate
    fullName: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    nameWithType: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)
  isExternal: true
  name: Argument<T>(CommandLineApplication, String, String, Boolean)
  nameWithType: CommandLineApplicationExtensions.Argument<T>(CommandLineApplication, String, String, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument<T>(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, System.Boolean)
  nameWithType.vb: CommandLineApplicationExtensions.Argument(Of T)(CommandLineApplication, String, String, Boolean)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument(Of T)(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, System.Boolean)
  name.vb: Argument(Of T)(CommandLineApplication, String, String, Boolean)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)
    name: Argument<T>
    nameWithType: CommandLineApplicationExtensions.Argument<T>
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,System.Boolean)
    name: Argument(Of T)
    nameWithType: CommandLineApplicationExtensions.Argument(Of T)
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Argument(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
  parent: McMaster.Extensions.CommandLineUtils
  name: CommandLineApplicationExtensions
  nameWithType: CommandLineApplicationExtensions
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
  isExternal: true
  name: Option<T>(CommandLineApplication, String, String, CommandOptionType)
  nameWithType: CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType)
  nameWithType.vb: CommandLineApplicationExtensions.Option(Of T)(CommandLineApplication, String, String, CommandOptionType)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType)
  name.vb: Option(Of T)(CommandLineApplication, String, String, CommandOptionType)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
    name: Option<T>
    nameWithType: CommandLineApplicationExtensions.Option<T>
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType)
    name: Option(Of T)
    nameWithType: CommandLineApplicationExtensions.Option(Of T)
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
  isExternal: true
  name: Option<T>(CommandLineApplication, String, String, CommandOptionType, Boolean)
  nameWithType: CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Boolean)
  nameWithType.vb: CommandLineApplicationExtensions.Option(Of T)(CommandLineApplication, String, String, CommandOptionType, Boolean)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Boolean)
  name.vb: Option(Of T)(CommandLineApplication, String, String, CommandOptionType, Boolean)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
    name: Option<T>
    nameWithType: CommandLineApplicationExtensions.Option<T>
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Boolean)
    name: Option(Of T)
    nameWithType: CommandLineApplicationExtensions.Option(Of T)
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
  isExternal: true
  name: Option<T>(CommandLineApplication, String, String, CommandOptionType, Action<CommandOption>)
  nameWithType: CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType, Action<CommandOption>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action<McMaster.Extensions.CommandLineUtils.CommandOption>)
  nameWithType.vb: CommandLineApplicationExtensions.Option(Of T)(CommandLineApplication, String, String, CommandOptionType, Action(Of CommandOption))
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String, System.String, McMaster.Extensions.CommandLineUtils.CommandOptionType, System.Action(Of McMaster.Extensions.CommandLineUtils.CommandOption))
  name.vb: Option(Of T)(CommandLineApplication, String, String, CommandOptionType, Action(Of CommandOption))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
    name: Option<T>
    nameWithType: CommandLineApplicationExtensions.Option<T>
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option``1(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String,System.String,McMaster.Extensions.CommandLineUtils.CommandOptionType,System.Action{McMaster.Extensions.CommandLineUtils.CommandOption})
    name: Option(Of T)
    nameWithType: CommandLineApplicationExtensions.Option(Of T)
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.Option(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
    name: CommandOptionType
    nameWithType: CommandOptionType
    fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  name: HelpOption(CommandLineApplication)
  nameWithType: CommandLineApplicationExtensions.HelpOption(CommandLineApplication)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
    name: HelpOption
    nameWithType: CommandLineApplicationExtensions.HelpOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
    name: HelpOption
    nameWithType: CommandLineApplicationExtensions.HelpOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)
  isExternal: true
  name: HelpOption(CommandLineApplication, Boolean)
  nameWithType: CommandLineApplicationExtensions.HelpOption(CommandLineApplication, Boolean)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Boolean)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)
    name: HelpOption
    nameWithType: CommandLineApplicationExtensions.HelpOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Boolean)
    name: HelpOption
    nameWithType: CommandLineApplicationExtensions.HelpOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.HelpOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  name: VerboseOption(CommandLineApplication)
  nameWithType: CommandLineApplicationExtensions.VerboseOption(CommandLineApplication)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
    name: VerboseOption
    nameWithType: CommandLineApplicationExtensions.VerboseOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication)
    name: VerboseOption
    nameWithType: CommandLineApplicationExtensions.VerboseOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)
  isExternal: true
  name: VerboseOption(CommandLineApplication, String)
  nameWithType: CommandLineApplicationExtensions.VerboseOption(CommandLineApplication, String)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.String)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)
    name: VerboseOption
    nameWithType: CommandLineApplicationExtensions.VerboseOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.String)
    name: VerboseOption
    nameWithType: CommandLineApplicationExtensions.VerboseOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VerboseOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})
  isExternal: true
  name: OnExecute(CommandLineApplication, Func<Task>)
  nameWithType: CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Func<Task>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Func(Of Task))
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Func(Of System.Threading.Tasks.Task))
  name.vb: OnExecute(CommandLineApplication, Func(Of Task))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})
    name: OnExecute
    nameWithType: CommandLineApplicationExtensions.OnExecute
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.Threading.Tasks.Task})
    name: OnExecute
    nameWithType: CommandLineApplicationExtensions.OnExecute
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)
  isExternal: true
  name: OnExecute(CommandLineApplication, Action)
  nameWithType: CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Action)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Action)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)
    name: OnExecute
    nameWithType: CommandLineApplicationExtensions.OnExecute
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action)
    name: OnExecute
    nameWithType: CommandLineApplicationExtensions.OnExecute
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnExecute
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
  isExternal: true
  name: OnValidationError(CommandLineApplication, Func<ValidationResult, Int32>)
  nameWithType: CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Func<ValidationResult, Int32>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Func<System.ComponentModel.DataAnnotations.ValidationResult, System.Int32>)
  nameWithType.vb: CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Func(Of ValidationResult, Int32))
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Func(Of System.ComponentModel.DataAnnotations.ValidationResult, System.Int32))
  name.vb: OnValidationError(CommandLineApplication, Func(Of ValidationResult, Int32))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
    name: OnValidationError
    nameWithType: CommandLineApplicationExtensions.OnValidationError
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32})
    name: OnValidationError
    nameWithType: CommandLineApplicationExtensions.OnValidationError
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
  isExternal: true
  name: OnValidationError(CommandLineApplication, Action<ValidationResult>)
  nameWithType: CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Action<ValidationResult>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Action<System.ComponentModel.DataAnnotations.ValidationResult>)
  nameWithType.vb: CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Action(Of ValidationResult))
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Action(Of System.ComponentModel.DataAnnotations.ValidationResult))
  name.vb: OnValidationError(CommandLineApplication, Action(Of ValidationResult))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
    name: OnValidationError
    nameWithType: CommandLineApplicationExtensions.OnValidationError
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Action{System.ComponentModel.DataAnnotations.ValidationResult})
    name: OnValidationError
    nameWithType: CommandLineApplicationExtensions.OnValidationError
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.OnValidationError
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)
  isExternal: true
  name: VersionOptionFromAssemblyAttributes(CommandLineApplication, Assembly)
  nameWithType: CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(CommandLineApplication, Assembly)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Reflection.Assembly)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)
    name: VersionOptionFromAssemblyAttributes
    nameWithType: CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Reflection.Assembly)
    name: VersionOptionFromAssemblyAttributes
    nameWithType: CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})
  commentId: M:McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})
  isExternal: true
  name: OnValidate(CommandLineApplication, Func<ValidationContext, ValidationResult>)
  nameWithType: ValidationExtensions.OnValidate(CommandLineApplication, Func<ValidationContext, ValidationResult>)
  fullName: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Func<System.ComponentModel.DataAnnotations.ValidationContext, System.ComponentModel.DataAnnotations.ValidationResult>)
  nameWithType.vb: ValidationExtensions.OnValidate(CommandLineApplication, Func(Of ValidationContext, ValidationResult))
  fullName.vb: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandLineApplication, System.Func(Of System.ComponentModel.DataAnnotations.ValidationContext, System.ComponentModel.DataAnnotations.ValidationResult))
  name.vb: OnValidate(CommandLineApplication, Func(Of ValidationContext, ValidationResult))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})
    name: OnValidate
    nameWithType: ValidationExtensions.OnValidate
    fullName: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    nameWithType: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate(McMaster.Extensions.CommandLineUtils.CommandLineApplication,System.Func{System.ComponentModel.DataAnnotations.ValidationContext,System.ComponentModel.DataAnnotations.ValidationResult})
    name: OnValidate
    nameWithType: ValidationExtensions.OnValidate
    fullName: McMaster.Extensions.CommandLineUtils.ValidationExtensions.OnValidate
  - name: (
    nameWithType: (
    fullName: (
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    nameWithType: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.ValidationExtensions
  commentId: T:McMaster.Extensions.CommandLineUtils.ValidationExtensions
  parent: McMaster.Extensions.CommandLineUtils
  name: ValidationExtensions
  nameWithType: ValidationExtensions
  fullName: McMaster.Extensions.CommandLineUtils.ValidationExtensions
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: ThrowOnUnexpectedArgument
  nameWithType: CommandLineApplication.ThrowOnUnexpectedArgument
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.#ctor
  name: CommandLineApplication
  nameWithType: CommandLineApplication.CommandLineApplication
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.CommandLineApplication
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: McMaster.Extensions.CommandLineUtils.IConsole
  commentId: T:McMaster.Extensions.CommandLineUtils.IConsole
  parent: McMaster.Extensions.CommandLineUtils
  name: IConsole
  nameWithType: IConsole
  fullName: McMaster.Extensions.CommandLineUtils.IConsole
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator
  commentId: T:McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator
  parent: McMaster.Extensions.CommandLineUtils.HelpText
  name: IHelpTextGenerator
  nameWithType: IHelpTextGenerator
  fullName: McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator
- uid: McMaster.Extensions.CommandLineUtils.HelpText
  commentId: N:McMaster.Extensions.CommandLineUtils.HelpText
  name: McMaster.Extensions.CommandLineUtils.HelpText
  nameWithType: McMaster.Extensions.CommandLineUtils.HelpText
  fullName: McMaster.Extensions.CommandLineUtils.HelpText
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent
  name: Parent
  nameWithType: CommandLineApplication.Parent
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpTextGenerator*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpTextGenerator
  name: HelpTextGenerator
  nameWithType: CommandLineApplication.HelpTextGenerator
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpTextGenerator
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name
  name: Name
  nameWithType: CommandLineApplication.Name
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName
  name: FullName
  nameWithType: CommandLineApplication.FullName
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Description*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Description
  name: Description
  nameWithType: CommandLineApplication.Description
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Description
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowInHelpText*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowInHelpText
  name: ShowInHelpText
  nameWithType: CommandLineApplication.ShowInHelpText
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowInHelpText
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExtendedHelpText*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExtendedHelpText
  name: ExtendedHelpText
  nameWithType: CommandLineApplication.ExtendedHelpText
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExtendedHelpText
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: GetOptions()
  nameWithType: CommandLineApplication.GetOptions()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions()
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
    name: GetOptions
    nameWithType: CommandLineApplication.GetOptions
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
    name: GetOptions
    nameWithType: CommandLineApplication.GetOptions
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options
  name: Options
  nameWithType: CommandLineApplication.Options
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options
- uid: System.Collections.Generic.List{McMaster.Extensions.CommandLineUtils.CommandOption}
  commentId: T:System.Collections.Generic.List{McMaster.Extensions.CommandLineUtils.CommandOption}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<CommandOption>
  nameWithType: List<CommandOption>
  fullName: System.Collections.Generic.List<McMaster.Extensions.CommandLineUtils.CommandOption>
  nameWithType.vb: List(Of CommandOption)
  fullName.vb: System.Collections.Generic.List(Of McMaster.Extensions.CommandLineUtils.CommandOption)
  name.vb: List(Of CommandOption)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: Name
  nameWithType: CommandLineApplication.Name
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Name
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  isExternal: true
  name: AddName(String)
  nameWithType: CommandLineApplication.AddName(String)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)
    name: AddName
    nameWithType: CommandLineApplication.AddName
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName(System.String)
    name: AddName
    nameWithType: CommandLineApplication.AddName
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Names*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Names
  name: Names
  nameWithType: CommandLineApplication.Names
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Names
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  isExternal: true
  name: HelpOption(String)
  nameWithType: CommandLineApplication.HelpOption(String)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)
    name: HelpOption
    nameWithType: CommandLineApplication.HelpOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption(System.String)
    name: HelpOption
    nameWithType: CommandLineApplication.HelpOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp
  name: OptionHelp
  nameWithType: CommandLineApplication.OptionHelp
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp
- uid: McMaster.Extensions.CommandLineUtils.CommandOption
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandOption
  parent: McMaster.Extensions.CommandLineUtils
  name: CommandOption
  nameWithType: CommandOption
  fullName: McMaster.Extensions.CommandLineUtils.CommandOption
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.Func{System.String},System.Func{System.String})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.Func{System.String},System.Func{System.String})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  isExternal: true
  name: VersionOption(String, Func<String>, Func<String>)
  nameWithType: CommandLineApplication.VersionOption(String, Func<String>, Func<String>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String, System.Func<System.String>, System.Func<System.String>)
  nameWithType.vb: CommandLineApplication.VersionOption(String, Func(Of String), Func(Of String))
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String, System.Func(Of System.String), System.Func(Of System.String))
  name.vb: VersionOption(String, Func(Of String), Func(Of String))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.Func{System.String},System.Func{System.String})
    name: VersionOption
    nameWithType: CommandLineApplication.VersionOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption(System.String,System.Func{System.String},System.Func{System.String})
    name: VersionOption
    nameWithType: CommandLineApplication.VersionOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
  name: OptionVersion
  nameWithType: CommandLineApplication.OptionVersion
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments
  name: Arguments
  nameWithType: CommandLineApplication.Arguments
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments
- uid: System.Collections.Generic.List{McMaster.Extensions.CommandLineUtils.CommandArgument}
  commentId: T:System.Collections.Generic.List{McMaster.Extensions.CommandLineUtils.CommandArgument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<CommandArgument>
  nameWithType: List<CommandArgument>
  fullName: System.Collections.Generic.List<McMaster.Extensions.CommandLineUtils.CommandArgument>
  nameWithType.vb: List(Of CommandArgument)
  fullName.vb: System.Collections.Generic.List(Of McMaster.Extensions.CommandLineUtils.CommandArgument)
  name.vb: List(Of CommandArgument)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments
  name: RemainingArguments
  nameWithType: CommandLineApplication.RemainingArguments
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument
  name: ThrowOnUnexpectedArgument
  nameWithType: CommandLineApplication.ThrowOnUnexpectedArgument
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ThrowOnUnexpectedArgument
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText*
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText
  name: UsePagerForHelpText
  nameWithType: CommandLineApplication.UsePagerForHelpText
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText
  name: UsePagerForHelpText
  nameWithType: CommandLineApplication.UsePagerForHelpText
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.UsePagerForHelpText
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: OptionHelp
  nameWithType: CommandLineApplication.OptionHelp
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionHelp
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: OptionVersion
  nameWithType: CommandLineApplication.OptionVersion
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionVersion
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation
  name: IsShowingInformation
  nameWithType: CommandLineApplication.IsShowingInformation
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: IsShowingInformation
  nameWithType: CommandLineApplication.IsShowingInformation
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.IsShowingInformation
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
  name: Invoke
  nameWithType: CommandLineApplication.Invoke
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
- uid: System.Func{System.Int32}
  commentId: T:System.Func{System.Int32}
  parent: System
  definition: System.Func`1
  name: Func<Int32>
  nameWithType: Func<Int32>
  fullName: System.Func<System.Int32>
  nameWithType.vb: Func(Of Int32)
  fullName.vb: System.Func(Of System.Int32)
  name.vb: Func(Of Int32)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter
  name: LongVersionGetter
  nameWithType: CommandLineApplication.LongVersionGetter
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter
- uid: System.Func{System.String}
  commentId: T:System.Func{System.String}
  parent: System
  definition: System.Func`1
  name: Func<String>
  nameWithType: Func<String>
  fullName: System.Func<System.String>
  nameWithType.vb: Func(Of String)
  fullName.vb: System.Func(Of System.String)
  name.vb: Func(Of String)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter
  name: ShortVersionGetter
  nameWithType: CommandLineApplication.ShortVersionGetter
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands
  name: Commands
  nameWithType: CommandLineApplication.Commands
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands
- uid: System.Collections.Generic.List{McMaster.Extensions.CommandLineUtils.CommandLineApplication}
  commentId: T:System.Collections.Generic.List{McMaster.Extensions.CommandLineUtils.CommandLineApplication}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<CommandLineApplication>
  nameWithType: List<CommandLineApplication>
  fullName: System.Collections.Generic.List<McMaster.Extensions.CommandLineUtils.CommandLineApplication>
  nameWithType.vb: List(Of CommandLineApplication)
  fullName.vb: System.Collections.Generic.List(Of McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  name.vb: List(Of CommandLineApplication)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: RemainingArguments
  nameWithType: CommandLineApplication.RemainingArguments
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.RemainingArguments
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AllowArgumentSeparator*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AllowArgumentSeparator
  name: AllowArgumentSeparator
  nameWithType: CommandLineApplication.AllowArgumentSeparator
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AllowArgumentSeparator
- uid: McMaster.Extensions.CommandLineUtils.ResponseFileHandling.Disabled
  commentId: F:McMaster.Extensions.CommandLineUtils.ResponseFileHandling.Disabled
  isExternal: true
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling
  name: ResponseFileHandling
  nameWithType: CommandLineApplication.ResponseFileHandling
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling
- uid: McMaster.Extensions.CommandLineUtils.ResponseFileHandling
  commentId: T:McMaster.Extensions.CommandLineUtils.ResponseFileHandling
  parent: McMaster.Extensions.CommandLineUtils
  name: ResponseFileHandling
  nameWithType: ResponseFileHandling
  fullName: McMaster.Extensions.CommandLineUtils.ResponseFileHandling
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionsComparison*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionsComparison
  name: OptionsComparison
  nameWithType: CommandLineApplication.OptionsComparison
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OptionsComparison
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: McMaster.Extensions.CommandLineUtils.CommandOptionType.NoValue
  commentId: F:McMaster.Extensions.CommandLineUtils.CommandOptionType.NoValue
  isExternal: true
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ClusterOptions*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ClusterOptions
  name: ClusterOptions
  nameWithType: CommandLineApplication.ClusterOptions
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ClusterOptions
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValueParsers*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValueParsers
  name: ValueParsers
  nameWithType: CommandLineApplication.ValueParsers
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValueParsers
- uid: McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider
  commentId: T:McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider
  parent: McMaster.Extensions.CommandLineUtils.Abstractions
  name: ValueParserProvider
  nameWithType: ValueParserProvider
  fullName: McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider
- uid: McMaster.Extensions.CommandLineUtils.Abstractions
  commentId: N:McMaster.Extensions.CommandLineUtils.Abstractions
  name: McMaster.Extensions.CommandLineUtils.Abstractions
  nameWithType: McMaster.Extensions.CommandLineUtils.Abstractions
  fullName: McMaster.Extensions.CommandLineUtils.Abstractions
- uid: System.IO.Directory.GetCurrentDirectory
  commentId: M:System.IO.Directory.GetCurrentDirectory
  isExternal: true
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: ResponseFileHandling
  nameWithType: CommandLineApplication.ResponseFileHandling
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ResponseFileHandling
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.WorkingDirectory*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.WorkingDirectory
  name: WorkingDirectory
  nameWithType: CommandLineApplication.WorkingDirectory
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.WorkingDirectory
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Out*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Out
  name: Out
  nameWithType: CommandLineApplication.Out
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Out
- uid: System.IO.TextWriter
  commentId: T:System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Error*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Error
  name: Error
  nameWithType: CommandLineApplication.Error
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Error
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
  name: GetOptions
  nameWithType: CommandLineApplication.GetOptions
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetOptions
- uid: System.Collections.Generic.IEnumerable{McMaster.Extensions.CommandLineUtils.CommandOption}
  commentId: T:System.Collections.Generic.IEnumerable{McMaster.Extensions.CommandLineUtils.CommandOption}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CommandOption>
  nameWithType: IEnumerable<CommandOption>
  fullName: System.Collections.Generic.IEnumerable<McMaster.Extensions.CommandLineUtils.CommandOption>
  nameWithType.vb: IEnumerable(Of CommandOption)
  fullName.vb: System.Collections.Generic.IEnumerable(Of McMaster.Extensions.CommandLineUtils.CommandOption)
  name.vb: IEnumerable(Of CommandOption)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName
  name: AddName
  nameWithType: CommandLineApplication.AddName
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddName
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddSubcommand*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddSubcommand
  name: AddSubcommand
  nameWithType: CommandLineApplication.AddSubcommand
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.AddSubcommand
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command
  name: Command
  nameWithType: CommandLineApplication.Command
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Command
- uid: System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication}
  commentId: T:System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication}
  parent: System
  definition: System.Action`1
  name: Action<CommandLineApplication>
  nameWithType: Action<CommandLineApplication>
  fullName: System.Action<McMaster.Extensions.CommandLineUtils.CommandLineApplication>
  nameWithType.vb: Action(Of CommandLineApplication)
  fullName.vb: System.Action(Of McMaster.Extensions.CommandLineUtils.CommandLineApplication)
  name.vb: Action(Of CommandLineApplication)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication{{TModel}}}
  commentId: T:System.Action{McMaster.Extensions.CommandLineUtils.CommandLineApplication{``0}}
  parent: System
  definition: System.Action`1
  name: Action<CommandLineApplication<TModel>>
  nameWithType: Action<CommandLineApplication<TModel>>
  fullName: System.Action<McMaster.Extensions.CommandLineUtils.CommandLineApplication<TModel>>
  nameWithType.vb: Action(Of CommandLineApplication(Of TModel))
  fullName.vb: System.Action(Of McMaster.Extensions.CommandLineUtils.CommandLineApplication(Of TModel))
  name.vb: Action(Of CommandLineApplication(Of TModel))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication`1
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication`1
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication{{TModel}}
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandLineApplication{``0}
  parent: McMaster.Extensions.CommandLineUtils
  definition: McMaster.Extensions.CommandLineUtils.CommandLineApplication`1
  name: CommandLineApplication<TModel>
  nameWithType: CommandLineApplication<TModel>
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication<TModel>
  nameWithType.vb: CommandLineApplication(Of TModel)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication(Of TModel)
  name.vb: CommandLineApplication(Of TModel)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication`1
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication`1
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication`1
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandLineApplication`1
  name: CommandLineApplication<TModel>
  nameWithType: CommandLineApplication<TModel>
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication<TModel>
  nameWithType.vb: CommandLineApplication(Of TModel)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication(Of TModel)
  name.vb: CommandLineApplication(Of TModel)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication`1
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication`1
    name: CommandLineApplication
    nameWithType: CommandLineApplication
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option
  name: Option
  nameWithType: CommandLineApplication.Option
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Option
- uid: McMaster.Extensions.CommandLineUtils.CommandOptionType
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandOptionType
  parent: McMaster.Extensions.CommandLineUtils
  name: CommandOptionType
  nameWithType: CommandOptionType
  fullName: McMaster.Extensions.CommandLineUtils.CommandOptionType
- uid: System.Action{McMaster.Extensions.CommandLineUtils.CommandOption}
  commentId: T:System.Action{McMaster.Extensions.CommandLineUtils.CommandOption}
  parent: System
  definition: System.Action`1
  name: Action<CommandOption>
  nameWithType: Action<CommandOption>
  fullName: System.Action<McMaster.Extensions.CommandLineUtils.CommandOption>
  nameWithType.vb: Action(Of CommandOption)
  fullName.vb: System.Action(Of McMaster.Extensions.CommandLineUtils.CommandOption)
  name.vb: Action(Of CommandOption)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandOption{{T}}
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandOption{``0}
  parent: McMaster.Extensions.CommandLineUtils
  definition: McMaster.Extensions.CommandLineUtils.CommandOption`1
  name: CommandOption<T>
  nameWithType: CommandOption<T>
  fullName: McMaster.Extensions.CommandLineUtils.CommandOption<T>
  nameWithType.vb: CommandOption(Of T)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandOption(Of T)
  name.vb: CommandOption(Of T)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption`1
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption`1
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandOption`1
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandOption`1
  name: CommandOption<T>
  nameWithType: CommandOption<T>
  fullName: McMaster.Extensions.CommandLineUtils.CommandOption<T>
  nameWithType.vb: CommandOption(Of T)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandOption(Of T)
  name.vb: CommandOption(Of T)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption`1
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandOption`1
    name: CommandOption
    nameWithType: CommandOption
    fullName: McMaster.Extensions.CommandLineUtils.CommandOption
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument
  name: Argument
  nameWithType: CommandLineApplication.Argument
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Argument
- uid: McMaster.Extensions.CommandLineUtils.CommandArgument
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandArgument
  parent: McMaster.Extensions.CommandLineUtils
  name: CommandArgument
  nameWithType: CommandArgument
  fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
- uid: System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument}
  commentId: T:System.Action{McMaster.Extensions.CommandLineUtils.CommandArgument}
  parent: System
  definition: System.Action`1
  name: Action<CommandArgument>
  nameWithType: Action<CommandArgument>
  fullName: System.Action<McMaster.Extensions.CommandLineUtils.CommandArgument>
  nameWithType.vb: Action(Of CommandArgument)
  fullName.vb: System.Action(Of McMaster.Extensions.CommandLineUtils.CommandArgument)
  name.vb: Action(Of CommandArgument)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandArgument{{T}}
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandArgument{``0}
  parent: McMaster.Extensions.CommandLineUtils
  definition: McMaster.Extensions.CommandLineUtils.CommandArgument`1
  name: CommandArgument<T>
  nameWithType: CommandArgument<T>
  fullName: McMaster.Extensions.CommandLineUtils.CommandArgument<T>
  nameWithType.vb: CommandArgument(Of T)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandArgument(Of T)
  name.vb: CommandArgument(Of T)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument`1
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument`1
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandArgument`1
  commentId: T:McMaster.Extensions.CommandLineUtils.CommandArgument`1
  name: CommandArgument<T>
  nameWithType: CommandArgument<T>
  fullName: McMaster.Extensions.CommandLineUtils.CommandArgument<T>
  nameWithType.vb: CommandArgument(Of T)
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandArgument(Of T)
  name.vb: CommandArgument(Of T)
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument`1
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandArgument`1
    name: CommandArgument
    nameWithType: CommandArgument
    fullName: McMaster.Extensions.CommandLineUtils.CommandArgument
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute
  name: OnExecute
  nameWithType: CommandLineApplication.OnExecute
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute
- uid: System.Func{System.Threading.Tasks.Task{System.Int32}}
  commentId: T:System.Func{System.Threading.Tasks.Task{System.Int32}}
  parent: System
  definition: System.Func`1
  name: Func<Task<Int32>>
  nameWithType: Func<Task<Int32>>
  fullName: System.Func<System.Threading.Tasks.Task<System.Int32>>
  nameWithType.vb: Func(Of Task(Of Int32))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of System.Int32))
  name.vb: Func(Of Task(Of Int32))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnParsingComplete*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnParsingComplete
  name: OnParsingComplete
  nameWithType: CommandLineApplication.OnParsingComplete
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnParsingComplete
- uid: System.Action{McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult}
  commentId: T:System.Action{McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult}
  parent: System
  definition: System.Action`1
  name: Action<ParseResult>
  nameWithType: Action<ParseResult>
  fullName: System.Action<McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult>
  nameWithType.vb: Action(Of ParseResult)
  fullName.vb: System.Action(Of McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult)
  name.vb: Action(Of ParseResult)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult
    name: ParseResult
    nameWithType: ParseResult
    fullName: McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult
    name: ParseResult
    nameWithType: ParseResult
    fullName: McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: Options
  nameWithType: CommandLineApplication.Options
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Options
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: Arguments
  nameWithType: CommandLineApplication.Arguments
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Arguments
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: Commands
  nameWithType: CommandLineApplication.Commands
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Commands
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse
  name: Parse
  nameWithType: CommandLineApplication.Parse
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult
  commentId: T:McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult
  parent: McMaster.Extensions.CommandLineUtils.Abstractions
  name: ParseResult
  nameWithType: ParseResult
  fullName: McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.MakeSuggestionsInErrorMessage*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.MakeSuggestionsInErrorMessage
  name: MakeSuggestionsInErrorMessage
  nameWithType: CommandLineApplication.MakeSuggestionsInErrorMessage
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.MakeSuggestionsInErrorMessage
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HandleParseResult*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HandleParseResult
  name: HandleParseResult
  nameWithType: CommandLineApplication.HandleParseResult
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HandleParseResult
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  isExternal: true
  name: Parse(String[])
  nameWithType: CommandLineApplication.Parse(String[])
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])
  nameWithType.vb: CommandLineApplication.Parse(String())
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String())
  name.vb: Parse(String())
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])
    name: Parse
    nameWithType: CommandLineApplication.Parse
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(System.String[])
    name: Parse
    nameWithType: CommandLineApplication.Parse
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: GetValidationResult()
  nameWithType: CommandLineApplication.GetValidationResult()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult()
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
    name: GetValidationResult
    nameWithType: CommandLineApplication.GetValidationResult
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
    name: GetValidationResult
    nameWithType: CommandLineApplication.GetValidationResult
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: ValidationErrorHandler
  nameWithType: CommandLineApplication.ValidationErrorHandler
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: Invoke
  nameWithType: CommandLineApplication.Invoke
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Invoke
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute
  name: Execute
  nameWithType: CommandLineApplication.Execute
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption
  name: HelpOption
  nameWithType: CommandLineApplication.HelpOption
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.HelpOption
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption
  name: VersionOption
  nameWithType: CommandLineApplication.VersionOption
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.VersionOption
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHint*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHint
  name: ShowHint
  nameWithType: CommandLineApplication.ShowHint
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHint
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp
  name: ShowHelp
  nameWithType: CommandLineApplication.ShowHelp
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowHelp
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText
  name: GetHelpText
  nameWithType: CommandLineApplication.GetHelpText
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetHelpText
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: FullName
  nameWithType: CommandLineApplication.FullName
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.FullName
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: LongVersionGetter
  nameWithType: CommandLineApplication.LongVersionGetter
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.LongVersionGetter
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowVersion*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowVersion
  name: ShowVersion
  nameWithType: CommandLineApplication.ShowVersion
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowVersion
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetVersionText*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetVersionText
  name: GetVersionText
  nameWithType: CommandLineApplication.GetVersionText
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetVersionText
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: ShortVersionGetter
  nameWithType: CommandLineApplication.ShortVersionGetter
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShortVersionGetter
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
  name: GetFullNameAndVersion
  nameWithType: CommandLineApplication.GetFullNameAndVersion
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent
  commentId: P:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: Parent
  nameWithType: CommandLineApplication.Parent
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parent
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  name: GetFullNameAndVersion()
  nameWithType: CommandLineApplication.GetFullNameAndVersion()
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion()
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
    name: GetFullNameAndVersion
    nameWithType: CommandLineApplication.GetFullNameAndVersion
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
    name: GetFullNameAndVersion
    nameWithType: CommandLineApplication.GetFullNameAndVersion
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetFullNameAndVersion
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowRootCommandFullNameAndVersion*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowRootCommandFullNameAndVersion
  name: ShowRootCommandFullNameAndVersion
  nameWithType: CommandLineApplication.ShowRootCommandFullNameAndVersion
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ShowRootCommandFullNameAndVersion
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Conventions*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Conventions
  name: Conventions
  nameWithType: CommandLineApplication.Conventions
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Conventions
- uid: McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder
  commentId: T:McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder
  parent: McMaster.Extensions.CommandLineUtils.Conventions
  name: IConventionBuilder
  nameWithType: IConventionBuilder
  fullName: McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder
- uid: McMaster.Extensions.CommandLineUtils.Conventions
  commentId: N:McMaster.Extensions.CommandLineUtils.Conventions
  name: McMaster.Extensions.CommandLineUtils.Conventions
  nameWithType: McMaster.Extensions.CommandLineUtils.Conventions
  fullName: McMaster.Extensions.CommandLineUtils.Conventions
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Dispose*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Dispose
  name: Dispose
  nameWithType: CommandLineApplication.Dispose
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.System#IServiceProvider#GetService*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.System#IServiceProvider#GetService
  name: IServiceProvider.GetService
  nameWithType: CommandLineApplication.IServiceProvider.GetService
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.System.IServiceProvider.GetService
  nameWithType.vb: CommandLineApplication.System.IServiceProvider.GetService
  name.vb: System.IServiceProvider.GetService
- uid: System.IServiceProvider.GetService(System.Type)
  commentId: M:System.IServiceProvider.GetService(System.Type)
  parent: System.IServiceProvider
  isExternal: true
  name: GetService(Type)
  nameWithType: IServiceProvider.GetService(Type)
  fullName: System.IServiceProvider.GetService(System.Type)
  spec.csharp:
  - uid: System.IServiceProvider.GetService(System.Type)
    name: GetService
    nameWithType: IServiceProvider.GetService
    fullName: System.IServiceProvider.GetService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IServiceProvider.GetService(System.Type)
    name: GetService
    nameWithType: IServiceProvider.GetService
    fullName: System.IServiceProvider.GetService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.Arguments
  commentId: P:McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.Arguments
  isExternal: true
- uid: McMaster.Extensions.CommandLineUtils.OptionAttribute
  commentId: T:McMaster.Extensions.CommandLineUtils.OptionAttribute
  name: OptionAttribute
  nameWithType: OptionAttribute
  fullName: McMaster.Extensions.CommandLineUtils.OptionAttribute
- uid: McMaster.Extensions.CommandLineUtils.ArgumentAttribute
  commentId: T:McMaster.Extensions.CommandLineUtils.ArgumentAttribute
  name: ArgumentAttribute
  nameWithType: ArgumentAttribute
  fullName: McMaster.Extensions.CommandLineUtils.ArgumentAttribute
- uid: McMaster.Extensions.CommandLineUtils.HelpOptionAttribute
  commentId: T:McMaster.Extensions.CommandLineUtils.HelpOptionAttribute
  name: HelpOptionAttribute
  nameWithType: HelpOptionAttribute
  fullName: McMaster.Extensions.CommandLineUtils.HelpOptionAttribute
- uid: McMaster.Extensions.CommandLineUtils.VersionOptionAttribute
  commentId: T:McMaster.Extensions.CommandLineUtils.VersionOptionAttribute
  name: VersionOptionAttribute
  nameWithType: VersionOptionAttribute
  fullName: McMaster.Extensions.CommandLineUtils.VersionOptionAttribute
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext
  commentId: T:McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext
  parent: McMaster.Extensions.CommandLineUtils.Abstractions
  name: CommandLineContext
  nameWithType: CommandLineContext
  fullName: McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync
  name: ExecuteAsync
  nameWithType: CommandLineApplication.ExecuteAsync
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler
  name: ValidationErrorHandler
  nameWithType: CommandLineApplication.ValidationErrorHandler
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.ValidationErrorHandler
- uid: System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32}
  commentId: T:System.Func{System.ComponentModel.DataAnnotations.ValidationResult,System.Int32}
  parent: System
  definition: System.Func`2
  name: Func<ValidationResult, Int32>
  nameWithType: Func<ValidationResult, Int32>
  fullName: System.Func<System.ComponentModel.DataAnnotations.ValidationResult, System.Int32>
  nameWithType.vb: Func(Of ValidationResult, Int32)
  fullName.vb: System.Func(Of System.ComponentModel.DataAnnotations.ValidationResult, System.Int32)
  name.vb: Func(Of ValidationResult, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})
  commentId: M:McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})
  parent: McMaster.Extensions.CommandLineUtils.CommandLineApplication
  isExternal: true
  name: OnExecute(Func<Int32>)
  nameWithType: CommandLineApplication.OnExecute(Func<Int32>)
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func<System.Int32>)
  nameWithType.vb: CommandLineApplication.OnExecute(Func(Of Int32))
  fullName.vb: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func(Of System.Int32))
  name.vb: OnExecute(Func(Of Int32))
  spec.csharp:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})
    name: OnExecute
    nameWithType: CommandLineApplication.OnExecute
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute(System.Func{System.Int32})
    name: OnExecute
    nameWithType: CommandLineApplication.OnExecute
    fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.OnExecute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Validators*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.Validators
  name: Validators
  nameWithType: CommandLineApplication.Validators
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.Validators
- uid: System.Collections.Generic.ICollection{McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator}
  commentId: T:System.Collections.Generic.ICollection{McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ICommandValidator>
  nameWithType: ICollection<ICommandValidator>
  fullName: System.Collections.Generic.ICollection<McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator>
  nameWithType.vb: ICollection(Of ICommandValidator)
  fullName.vb: System.Collections.Generic.ICollection(Of McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator)
  name.vb: ICollection(Of ICommandValidator)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator
    name: ICommandValidator
    nameWithType: ICommandValidator
    fullName: McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator
    name: ICommandValidator
    nameWithType: ICommandValidator
    fullName: McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.DataAnnotations.ValidationResult.Success
  commentId: F:System.ComponentModel.DataAnnotations.ValidationResult.Success
  isExternal: true
- uid: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult*
  commentId: Overload:McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
  name: GetValidationResult
  nameWithType: CommandLineApplication.GetValidationResult
  fullName: McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult
- uid: System.ComponentModel.DataAnnotations.ValidationResult
  commentId: T:System.ComponentModel.DataAnnotations.ValidationResult
  parent: System.ComponentModel.DataAnnotations
  isExternal: true
  name: ValidationResult
  nameWithType: ValidationResult
  fullName: System.ComponentModel.DataAnnotations.ValidationResult
- uid: System.ComponentModel.DataAnnotations
  commentId: N:System.ComponentModel.DataAnnotations
  isExternal: true
  name: System.ComponentModel.DataAnnotations
  nameWithType: System.ComponentModel.DataAnnotations
  fullName: System.ComponentModel.DataAnnotations
